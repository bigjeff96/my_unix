
my_ls/main.cpp,854
#define GB_IMPLEMENTATIONGB_IMPLEMENTATION1,0
#define NORMAL_COLOR NORMAL_COLOR8,139
#define GREEN GREEN9,170
#define BLUE BLUE10,195
#define RED RED11,219
#define BOLD BOLD12,242
typedef struct stat Stat;Stat13,265
typedef enum FLAGS { SHOW_DOT_FILES, SHOW_FILE_SIZE, FLAGS_COUNT } FLAGS;FLAGS14,291
typedef enum FLAGS { SHOW_DOT_FILES, SHOW_FILE_SIZE, FLAGS_COUNT } FLAGS;SHOW_DOT_FILES14,291
typedef enum FLAGS { SHOW_DOT_FILES, SHOW_FILE_SIZE, FLAGS_COUNT } FLAGS;SHOW_FILE_SIZE14,291
typedef enum FLAGS { SHOW_DOT_FILES, SHOW_FILE_SIZE, FLAGS_COUNT } FLAGS;FLAGS_COUNT14,291
typedef enum FLAGS { SHOW_DOT_FILES, SHOW_FILE_SIZE, FLAGS_COUNT } FLAGS;FLAGS14,291
gb_global b8 flags[BITNSLOTS(FLAGS_COUNT)] = {};flags18,408
int main(int argc, char** argv)main20,458
void print_file(dirent* file, Stat* sb)print_file75,1959

my_ls/test_file,0

my_ls/my_ls,0

my_ls/debug.sh,0

my_ls/build.sh,0

my_ls/nohup.out,0

README.md,22
# my_unixmy_unix1,0

TAGS,0

LICENSE,0

lib/gb.h,119765
#define GB_INCLUDE_GB_HGB_INCLUDE_GB_H131,4377
	#define GB_EXTERN GB_EXTERN138,4473
	#define GB_DLL_EXPORT GB_DLL_EXPORT144,4563
	#define GB_DLL_IMPORT GB_DLL_IMPORT145,4618
		#define GB_DEF GB_DEF154,4863
	#define GB_ARCH_64_BIT GB_ARCH_64_BIT162,5090
#define GB_ENDIAN_ORDERGB_ENDIAN_ORDER173,5283
	#define GB_IS_BIG_ENDIAN GB_IS_BIG_ENDIAN175,5399
	#define GB_IS_LITTLE_ENDIAN GB_IS_LITTLE_ENDIAN176,5447
	#define GB_SYSTEM_WINDOWS GB_SYSTEM_WINDOWS181,5570
	#define GB_COMPILER_MSVC GB_COMPILER_MSVC208,6156
	#define GB_CPU_X86 GB_CPU_X86219,6441
	#define GB_CACHE_LINE_SIZE GB_CACHE_LINE_SIZE222,6499
	#define GB_STATIC_ASSERT3(GB_STATIC_ASSERT3256,7110
	#define GB_STATIC_ASSERT2(GB_STATIC_ASSERT2258,7240
	#define GB_STATIC_ASSERT1(GB_STATIC_ASSERT1259,7336
	#define GB_STATIC_ASSERT(GB_STATIC_ASSERT260,7405
	#define _CRT_SECURE_NO_WARNINGS_CRT_SECURE_NO_WARNINGS272,7651
	#define _GNU_SOURCE_GNU_SOURCE277,7728
	#define _LARGEFILE64_SOURCE_LARGEFILE64_SOURCE278,7749
		#define NOMINMAX NOMINMAX293,8015
		#define WIN32_LEAN_AND_MEAN WIN32_LEAN_AND_MEAN294,8047
		#define WIN32_MEAN_AND_LEAN WIN32_MEAN_AND_LEAN295,8079
		#define VC_EXTRALEAN VC_EXTRALEAN296,8111
	typedef unsigned char     u8;u8354,9280
	typedef   signed char     i8;i8355,9311
	typedef unsigned short   u16;u16356,9342
	typedef   signed short   i16;i16357,9373
	typedef unsigned int     u32;u32358,9404
	typedef   signed int     i32;i32359,9435
	typedef unsigned __int64 u64;u64368,9667
	typedef   signed __int64 i64;i64369,9698
typedef size_t    usize;usize392,10277
typedef ptrdiff_t isize;isize393,10302
	typedef signed   __int64  intptr;intptr400,10593
	typedef unsigned __int64 uintptr;uintptr401,10628
			#define _W64 _W64406,10845
			#define _W64_W64408,10875
	typedef _W64   signed int  intptr;intptr412,10909
	typedef _W64 unsigned int uintptr;uintptr413,10945
	typedef uintptr_t uintptr;uintptr415,10987
	typedef  intptr_t  intptr;intptr416,11015
typedef float  f32;f32421,11105
typedef double f64;f64422,11125
typedef i32 Rune; // NOTE(bill): Unicode codepointRune427,11219
#define GB_RUNE_INVALID GB_RUNE_INVALID428,11270
#define GB_RUNE_MAX GB_RUNE_MAX429,11313
#define GB_RUNE_BOM GB_RUNE_BOM430,11360
#define GB_RUNE_EOF GB_RUNE_EOF431,11403
typedef i8  b8;b8434,11444
typedef i16 b16;b16435,11460
typedef i32 b32; // NOTE(bill): Prefer this!!!b32436,11477
		#define true true442,11698
		#define false false445,11748
		typedef b8 bool;b8447,11782
#define U8_MIN U8_MIN455,11938
#define U8_MAX U8_MAX456,11956
#define I8_MIN I8_MIN457,11977
#define I8_MAX I8_MAX458,12004
#define U16_MIN U16_MIN460,12025
#define U16_MAX U16_MAX461,12044
#define I16_MIN I16_MIN462,12068
#define I16_MAX I16_MAX463,12098
#define U32_MIN U32_MIN465,12122
#define U32_MAX U32_MAX466,12141
#define I32_MIN I32_MIN467,12169
#define I32_MAX I32_MAX468,12203
#define U64_MIN U64_MIN470,12231
#define U64_MAX U64_MAX471,12252
#define I64_MIN I64_MIN472,12290
#define I64_MAX I64_MAX473,12334
	#define USIZE_MIX USIZE_MIX476,12400
	#define USIZE_MAX USIZE_MAX477,12427
	#define ISIZE_MIX ISIZE_MIX479,12455
	#define ISIZE_MAX ISIZE_MAX480,12482
	#define USIZE_MIX USIZE_MIX482,12539
	#define USIZE_MAX USIZE_MAX483,12566
	#define ISIZE_MIX ISIZE_MIX485,12594
	#define ISIZE_MAX ISIZE_MAX486,12621
#define F32_MIN F32_MIN491,12757
#define F32_MAX F32_MAX492,12789
#define F64_MIN F64_MIN494,12822
#define F64_MAX F64_MAX495,12862
			#define NULL NULL502,12979
			#define NULL NULL504,13011
		#define NULL NULL507,13045
	#define inline inline514,13210
	#define inline inline516,13269
	#define inlineinline518,13303
		#define gb_restrict gb_restrict524,13384
		#define gb_restrict gb_restrict526,13450
		#define gb_restrictgb_restrict528,13488
		#define gb_inlinegb_inline536,13677
		#define gb_inline gb_inline538,13705
		#define gb_inline gb_inline541,13755
		#define gb_no_inline gb_no_inline547,13877
		#define gb_no_inline gb_no_inline549,13928
		#define gb_thread_local gb_thread_local556,14068
		#define gb_thread_local gb_thread_local558,14138
		#define gb_thread_local gb_thread_local560,14180
#define cast(cast568,14313
#define gb_size_of(gb_size_of573,14420
#define gb_count_of(gb_count_of577,14489
#define gb_offset_of(gb_offset_of581,14625
		#define gb_align_of(gb_align_of587,14775
		template <typename T> struct gbAlignment_Trick { char c; T member; };gbAlignment_Trick591,14882
		template <typename T> struct gbAlignment_Trick { char c; T member; };c591,14882
		template <typename T> struct gbAlignment_Trick { char c; T member; };member591,14882
		#define gb_align_of(gb_align_of592,14954
	#define gb_align_of(gb_align_of598,15072
#define gb_swap(gb_swap604,15244
#define gb_global gb_global609,15437
#define gb_internal gb_internal610,15489
#define gb_local_persist gb_local_persist611,15541
		#define gb_unused(gb_unused617,15653
		#define gb_unused(gb_unused619,15739
		#define gb_unused(gb_unused621,15800
	template <typename T> struct gbRemoveReference       { typedef T Type; };gbRemoveReference639,16241
	template <typename T> struct gbRemoveReference       { typedef T Type; };Type639,16241
	template <typename T> struct gbRemoveReference<T &>  { typedef T Type; };gbRemoveReference640,16316
	template <typename T> struct gbRemoveReference<T &>  { typedef T Type; };Type640,16316
	template <typename T> struct gbRemoveReference<T &&> { typedef T Type; };gbRemoveReference641,16391
	template <typename T> struct gbRemoveReference<T &&> { typedef T Type; };Type641,16391
	template <typename T> inline T &&gb_forward(typename gbRemoveReference<T>::Type &t)  { return sgb_forward644,16612
	template <typename T> inline T &&gb_forward(typename gbRemoveReference<T>::Type &&t) { return sgb_forward645,16731
	template <typename T> inline T &&gb_move   (T &&t)                                   { return sgb_move646,16850
	struct gbprivDefer {gbprivDefer648,17026
		F f;f649,17048
		gbprivDefer(F &&f) : f(gb_forward<F>(f)) {}gbprivDefer650,17055
		~gbprivDefer() { f(); }~gbprivDefer651,17101
	template <typename F> gbprivDefer<F> gb__defer_func(F &&f) { return gbprivDefer<F>(gb_forward<Fgb__defer_func653,17131
	#define GB_DEFER_1(GB_DEFER_1655,17237
	#define GB_DEFER_2(GB_DEFER_2656,17268
	#define GB_DEFER_3(GB_DEFER_3657,17311
	#define defer(defer658,17364
#define GB_JOIN_MACROSGB_JOIN_MACROS683,17698
	#define GB_JOIN2_IND(GB_JOIN2_IND684,17721
	#define GB_JOIN2(GB_JOIN2686,17755
	#define GB_JOIN3(GB_JOIN3687,17804
	#define GB_JOIN4(GB_JOIN4688,17862
#define GB_BIT(GB_BIT693,17957
#define gb_min(gb_min697,18007
#define gb_max(gb_max701,18075
#define gb_min3(gb_min3705,18144
#define gb_max3(gb_max3709,18217
#define gb_clamp(gb_clamp713,18291
#define gb_clamp01(gb_clamp01717,18390
#define gb_is_between(gb_is_between721,18462
#define gb_abs(gb_abs725,18563
#define GB_MASK_SET(GB_MASK_SET730,18674
#define GB_PRINTF_ARGS(GB_PRINTF_ARGS739,18930
#define GB_PRINTF_ARGS(GB_PRINTF_ARGS741,19010
		#define GB_DEBUG_TRAP(GB_DEBUG_TRAP754,19199
		#define GB_DEBUG_TRAP(GB_DEBUG_TRAP756,19269
		#define GB_DEBUG_TRAP(GB_DEBUG_TRAP759,19326
#define GB_ASSERT_MSG(GB_ASSERT_MSG764,19407
#define GB_ASSERT(GB_ASSERT773,19634
#define GB_ASSERT_NOT_NULL(GB_ASSERT_NOT_NULL777,19719
#define GB_PANIC(GB_PANIC782,19891
#define     gb_zero_item(gb_zero_item812,20796
#define     gb_zero_array(gb_zero_array813,20906
#define gb_memcopy_array(gb_memcopy_array826,21548
#define gb_memmove_array(gb_memmove_array830,21676
#define GB_BIT_CAST(GB_BIT_CAST835,21853
#define gb_kilobytes(gb_kilobytes845,22055
#define gb_megabytes(gb_megabytes846,22111
#define gb_gigabytes(gb_gigabytes847,22167
#define gb_terabytes(gb_terabytes848,22223
typedef struct gbAtomic32  { i32   volatile value; } gbAtomic32;gbAtomic32860,22430
typedef struct gbAtomic32  { i32   volatile value; } gbAtomic32;value860,22430
typedef struct gbAtomic32  { i32   volatile value; } gbAtomic32;gbAtomic32860,22430
typedef struct gbAtomic64  { i64   volatile value; } gbAtomic64;gbAtomic64861,22495
typedef struct gbAtomic64  { i64   volatile value; } gbAtomic64;value861,22495
typedef struct gbAtomic64  { i64   volatile value; } gbAtomic64;gbAtomic64861,22495
typedef struct gbAtomicPtr { void *volatile value; } gbAtomicPtr;gbAtomicPtr862,22560
typedef struct gbAtomicPtr { void *volatile value; } gbAtomicPtr;value862,22560
typedef struct gbAtomicPtr { void *volatile value; } gbAtomicPtr;gbAtomicPtr862,22560
	#define GB_ATOMIC_PTR_ALIGNMENT GB_ATOMIC_PTR_ALIGNMENT865,22661
	#define GB_ATOMIC_PTR_ALIGNMENT GB_ATOMIC_PTR_ALIGNMENT867,22727
typedef struct gbAtomic32  { i32   volatile value; } __attribute__ ((aligned(4))) gbAtomic32;gbAtomic32872,22807
typedef struct gbAtomic32  { i32   volatile value; } __attribute__ ((aligned(4))) gbAtomic32;value872,22807
typedef struct gbAtomic32  { i32   volatile value; } __attribute__ ((aligned(4))) gbAtomic32;gbAtomic32872,22807
typedef struct gbAtomic64  { i64   volatile value; } __attribute__ ((aligned(8))) gbAtomic64;gbAtomic64873,22901
typedef struct gbAtomic64  { i64   volatile value; } __attribute__ ((aligned(8))) gbAtomic64;value873,22901
typedef struct gbAtomic64  { i64   volatile value; } __attribute__ ((aligned(8))) gbAtomic64;gbAtomic64873,22901
typedef struct gbAtomicPtr { void *volatile value; } __attribute__ ((aligned(GB_ATOMIC_PTR_ALIGNgbAtomicPtr874,22995
typedef struct gbAtomicPtr { void *volatile value; } __attribute__ ((aligned(GB_ATOMIC_PTR_ALIGNvalue874,22995
typedef struct gbAtomicPtr { void *volatile value; } __attribute__ ((aligned(GB_ATOMIC_PTR_ALIGNgbAtomicPtr874,22995
typedef struct gbSemaphore { void *win32_handle; }     gbSemaphore;gbSemaphore921,25799
typedef struct gbSemaphore { void *win32_handle; }     gbSemaphore;win32_handle921,25799
typedef struct gbSemaphore { void *win32_handle; }     gbSemaphore;gbSemaphore921,25799
typedef struct gbSemaphore { semaphore_t osx_handle; } gbSemaphore;gbSemaphore923,25896
typedef struct gbSemaphore { semaphore_t osx_handle; } gbSemaphore;osx_handle923,25896
typedef struct gbSemaphore { semaphore_t osx_handle; } gbSemaphore;gbSemaphore923,25896
typedef struct gbSemaphore { sem_t unix_handle; }      gbSemaphore;gbSemaphore925,25994
typedef struct gbSemaphore { sem_t unix_handle; }      gbSemaphore;unix_handle925,25994
typedef struct gbSemaphore { sem_t unix_handle; }      gbSemaphore;gbSemaphore925,25994
typedef struct gbMutex {gbMutex938,26394
	CRITICAL_SECTION win32_critical_section;win32_critical_section940,26450
} gbMutex;gbMutex945,26577
#define GB_THREAD_PROC(GB_THREAD_PROC968,27102
typedef GB_THREAD_PROC(gbThreadProc);GB_THREAD_PROC969,27167
typedef struct gbThread {gbThread971,27206
	void *        win32_handle;win32_handle973,27263
	gbThreadProc *proc;proc978,27335
	void *        user_data;user_data979,27356
	isize         user_index;user_index980,27382
	isize         return_value;return_value981,27409
	gbSemaphore   semaphore;semaphore983,27439
	isize         stack_size;stack_size984,27465
	b32 volatile  is_running;is_running985,27492
} gbThread;gbThread986,27519
typedef struct gbSync {gbSync1000,28131
	i32 target;  // Target Number of threadstarget1001,28155
	i32 current; // Threads to hitcurrent1002,28197
	i32 waiting; // Threads waitingwaiting1003,28229
	gbMutex start;start1005,28263
	gbMutex mutex;mutex1006,28279
	gbSemaphore release;release1007,28295
} gbSync;gbSync1008,28317
typedef struct gbAffinity {gbAffinity1021,28656
	b32   is_accurate;is_accurate1022,28684
	isize core_count;core_count1023,28704
	isize thread_count;thread_count1024,28723
	#define GB_WIN32_MAX_THREADS GB_WIN32_MAX_THREADS1025,28744
	usize core_masks[GB_WIN32_MAX_THREADS];core_masks1026,28798
} gbAffinity;gbAffinity1028,28840
typedef struct gbAffinity {gbAffinity1031,28884
	b32   is_accurate;is_accurate1032,28912
	isize core_count;core_count1033,28932
	isize thread_count;thread_count1034,28951
	isize threads_per_core;threads_per_core1035,28972
} gbAffinity;gbAffinity1036,28997
typedef struct gbAffinity {gbAffinity1039,29043
	b32   is_accurate;is_accurate1040,29071
	isize core_count;core_count1041,29091
	isize thread_count;thread_count1042,29110
	isize threads_per_core;threads_per_core1043,29131
} gbAffinity;gbAffinity1044,29156
typedef struct gbVirtualMemory {gbVirtualMemory1063,29563
	void *data;data1064,29596
	isize size;size1065,29609
} gbVirtualMemory;gbVirtualMemory1066,29622
typedef enum gbAllocationType {gbAllocationType1084,30153
	gbAllocation_Alloc,gbAllocation_Alloc1085,30185
	gbAllocation_Free,gbAllocation_Free1086,30206
	gbAllocation_FreeAll,gbAllocation_FreeAll1087,30226
	gbAllocation_Resize,gbAllocation_Resize1088,30249
} gbAllocationType;gbAllocationType1089,30271
#define GB_ALLOCATOR_PROC(GB_ALLOCATOR_PROC1092,30385
typedef GB_ALLOCATOR_PROC(gbAllocatorProc);GB_ALLOCATOR_PROC1097,30639
typedef struct gbAllocator {gbAllocator1099,30684
	gbAllocatorProc *proc;proc1100,30713
	void *           data;data1101,30737
} gbAllocator;gbAllocator1102,30761
typedef enum gbAllocatorFlag {gbAllocatorFlag1104,30777
	gbAllocatorFlag_ClearToZero = GB_BIT(0),gbAllocatorFlag_ClearToZero1105,30808
} gbAllocatorFlag;gbAllocatorFlag1106,30850
#define GB_DEFAULT_MEMORY_ALIGNMENT GB_DEFAULT_MEMORY_ALIGNMENT1110,30957
#define GB_DEFAULT_ALLOCATOR_FLAGS GB_DEFAULT_ALLOCATOR_FLAGS1114,31061
#define gb_alloc_item(gb_alloc_item1133,32080
#define gb_alloc_array(gb_alloc_array1134,32175
#define gb_malloc(gb_malloc1149,32805
#define gb_mfree(gb_mfree1150,32861
typedef struct gbArena {gbArena1158,32952
	gbAllocator backing;backing1159,32977
	void *      physical_start;physical_start1160,32999
	isize       total_size;total_size1161,33028
	isize       total_allocated;total_allocated1162,33053
	isize       temp_count;temp_count1163,33083
} gbArena;gbArena1164,33108
typedef struct gbTempArenaMemory {gbTempArenaMemory1182,33798
	gbArena *arena;arena1183,33833
	isize    original_count;original_count1184,33850
} gbTempArenaMemory;gbTempArenaMemory1185,33876
typedef struct gbPool {gbPool1201,34080
	gbAllocator backing;backing1202,34104
	void *      physical_start;physical_start1203,34126
	void *      free_list;free_list1204,34155
	isize       block_size;block_size1205,34179
	isize       block_align;block_align1206,34204
	isize       total_size;total_size1207,34230
} gbPool;gbPool1208,34255
typedef struct gbAllocationHeader {gbAllocationHeader1221,34734
	isize size;size1222,34770
} gbAllocationHeader;gbAllocationHeader1223,34783
#define GB_ISIZE_HIGH_BIT GB_ISIZE_HIGH_BIT1230,35075
#define GB_ISIZE_HIGH_BIT GB_ISIZE_HIGH_BIT1232,35142
typedef struct gbFreeListBlock gbFreeListBlock;gbFreeListBlock1247,35609
struct gbFreeListBlock {gbFreeListBlock1248,35657
	gbFreeListBlock *next;next1249,35682
	isize            size;size1250,35706
typedef struct gbFreeList {gbFreeList1253,35734
	void *           physical_start;physical_start1254,35762
	isize            total_size;total_size1255,35796
	gbFreeListBlock *curr_block;curr_block1257,35827
	isize            total_allocated;total_allocated1259,35858
	isize            allocation_count;allocation_count1260,35893
} gbFreeList;gbFreeList1261,35929
typedef struct gbScratchMemory {gbScratchMemory1276,36356
	void *physical_start;physical_start1277,36389
	isize total_size;total_size1278,36412
	void *alloc_point;alloc_point1279,36431
	void *free_point;free_point1280,36451
} gbScratchMemory;gbScratchMemory1281,36470
#define GB_COMPARE_PROC(GB_COMPARE_PROC1302,37045
typedef GB_COMPARE_PROC(gbCompareProc);GB_COMPARE_PROC1303,37114
#define GB_COMPARE_PROC_PTR(GB_COMPARE_PROC_PTR1305,37155
#define gb_sort_array(gb_sort_array1323,37964
#define gb_radix_sort(gb_radix_sort1327,38210
#define GB_RADIX_SORT_PROC(GB_RADIX_SORT_PROC1328,38259
#define gb_binary_search_array(gb_binary_search_array1337,38533
#define gb_shuffle_array(gb_shuffle_array1340,38789
#define gb_reverse_array(gb_reverse_array1343,38937
typedef char *gbString;gbString1513,45020
typedef struct gbStringHeader {gbStringHeader1516,45165
	gbAllocator allocator;allocator1517,45197
	isize       length;length1518,45221
	isize       capacity;capacity1519,45242
} gbStringHeader;gbStringHeader1520,45265
#define GB_STRING_HEADER(GB_STRING_HEADER1522,45284
typedef struct gbBufferHeader {gbBufferHeader1556,47051
	isize count;count1557,47083
	isize capacity;capacity1558,47097
} gbBufferHeader;gbBufferHeader1559,47114
#define gbBuffer(gbBuffer1561,47133
#define GB_BUFFER_HEADER(GB_BUFFER_HEADER1563,47164
#define gb_buffer_count(gb_buffer_count1564,47226
#define gb_buffer_capacity(gb_buffer_capacity1565,47285
#define gb_buffer_init(gb_buffer_init1567,47348
#define gb_buffer_free(gb_buffer_free1576,47624
#define gb_buffer_append(gb_buffer_append1578,47704
#define gb_buffer_appendv(gb_buffer_appendv1580,47792
#define gb_buffer_pop(gb_buffer_pop1587,48106
#define gb_buffer_clear(gb_buffer_clear1588,48207
typedef struct gbArrayHeader {gbArrayHeader1656,49618
	gbAllocator allocator;allocator1657,49649
	isize       count;count1658,49673
	isize       capacity;capacity1659,49693
} gbArrayHeader;gbArrayHeader1660,49716
#define gbArray(gbArray1663,49770
#define GB_ARRAY_GROW_FORMULA(GB_ARRAY_GROW_FORMULA1666,49830
#define GB_ARRAY_HEADER(GB_ARRAY_HEADER1671,49932
#define gb_array_allocator(gb_array_allocator1672,49993
#define gb_array_count(gb_array_count1673,50055
#define gb_array_capacity(gb_array_capacity1674,50113
#define gb_array_init_reserve(gb_array_init_reserve1677,50213
#define gb_array_init(gb_array_init1687,50621
#define gb_array_free(gb_array_free1689,50720
#define gb_array_set_capacity(gb_array_set_capacity1694,50851
#define gb_array_grow(gb_array_grow1706,51267
#define gb_array_append(gb_array_append1714,51512
#define gb_array_appendv(gb_array_appendv1720,51679
#define gb_array_pop(gb_array_pop1731,52070
#define gb_array_clear(gb_array_clear1732,52184
#define gb_array_resize(gb_array_resize1734,52259
#define gb_array_reserve(gb_array_reserve1741,52448
typedef struct gbHashTableFindResult {gbHashTableFindResult1793,54234
	isize hash_index;hash_index1794,54273
	isize entry_prev;entry_prev1795,54292
	isize entry_index;entry_index1796,54311
} gbHashTableFindResult;gbHashTableFindResult1797,54331
#define GB_TABLE(GB_TABLE1799,54357
#define GB_TABLE_DECLARE(GB_TABLE_DECLARE1803,54489
#define GB_TABLE_DEFINE(GB_TABLE_DEFINE1826,55234
typedef u32 gbFileMode;gbFileMode1938,58349
typedef enum gbFileModeFlag {gbFileModeFlag1939,58373
	gbFileMode_Read       = GB_BIT(0),gbFileMode_Read1940,58403
	gbFileMode_Write      = GB_BIT(1),gbFileMode_Write1941,58439
	gbFileMode_Append     = GB_BIT(2),gbFileMode_Append1942,58475
	gbFileMode_Rw         = GB_BIT(3),gbFileMode_Rw1943,58511
	gbFileMode_Modes = gbFileMode_Read | gbFileMode_Write | gbFileMode_Append | gbFileMode_Rw,gbFileMode_Modes1945,58548
} gbFileModeFlag;gbFileModeFlag1946,58640
typedef enum gbSeekWhenceType {gbSeekWhenceType1949,58723
	gbSeekWhence_Begin   = 0,gbSeekWhence_Begin1950,58755
	gbSeekWhence_Current = 1,gbSeekWhence_Current1951,58782
	gbSeekWhence_End     = 2,gbSeekWhence_End1952,58809
} gbSeekWhenceType;gbSeekWhenceType1953,58836
typedef enum gbFileError {gbFileError1955,58857
	gbFileError_None,gbFileError_None1956,58884
	gbFileError_Invalid,gbFileError_Invalid1957,58903
	gbFileError_InvalidFilename,gbFileError_InvalidFilename1958,58925
	gbFileError_Exists,gbFileError_Exists1959,58955
	gbFileError_NotExists,gbFileError_NotExists1960,58976
	gbFileError_Permission,gbFileError_Permission1961,59000
	gbFileError_TruncationFailure,gbFileError_TruncationFailure1962,59025
} gbFileError;gbFileError1963,59057
typedef union gbFileDescriptor {gbFileDescriptor1965,59073
	void *  p;p1966,59106
	intptr  i;i1967,59118
	uintptr u;u1968,59130
} gbFileDescriptor;gbFileDescriptor1969,59142
typedef struct gbFileOperations gbFileOperations;gbFileOperations1971,59163
#define GB_FILE_OPEN_PROC(GB_FILE_OPEN_PROC1973,59214
#define GB_FILE_READ_AT_PROC(GB_FILE_READ_AT_PROC1974,59351
#define GB_FILE_WRITE_AT_PROC(GB_FILE_WRITE_AT_PROC1975,59482
#define GB_FILE_SEEK_PROC(GB_FILE_SEEK_PROC1976,59622
#define GB_FILE_CLOSE_PROC(GB_FILE_CLOSE_PROC1977,59750
typedef GB_FILE_OPEN_PROC(gbFileOpenProc);GB_FILE_OPEN_PROC1978,59824
typedef GB_FILE_READ_AT_PROC(gbFileReadProc);GB_FILE_READ_AT_PROC1979,59867
typedef GB_FILE_WRITE_AT_PROC(gbFileWriteProc);GB_FILE_WRITE_AT_PROC1980,59913
typedef GB_FILE_SEEK_PROC(gbFileSeekProc);GB_FILE_SEEK_PROC1981,59961
typedef GB_FILE_CLOSE_PROC(gbFileCloseProc);GB_FILE_CLOSE_PROC1982,60004
struct gbFileOperations {gbFileOperations1984,60050
	gbFileReadProc  *read_at;read_at1985,60076
	gbFileWriteProc *write_at;write_at1986,60103
	gbFileSeekProc  *seek;seek1987,60131
	gbFileCloseProc *close;close1988,60155
typedef u64 gbFileTime;gbFileTime2000,60341
typedef struct gbFile {gbFile2002,60366
	gbFileOperations ops;ops2003,60390
	gbFileDescriptor fd;fd2004,60413
	char const *     filename;filename2005,60435
	gbFileTime       last_write_time;last_write_time2006,60463
} gbFile;gbFile2008,60560
typedef enum gbFileStandardType {gbFileStandardType2012,60599
	gbFileStandard_Input,gbFileStandard_Input2013,60633
	gbFileStandard_Output,gbFileStandard_Output2014,60656
	gbFileStandard_Error,gbFileStandard_Error2015,60680
	gbFileStandard_Count,gbFileStandard_Count2017,60704
} gbFileStandardType;gbFileStandardType2018,60727
typedef struct gbFileContents {gbFileContents2045,62498
	gbAllocator allocator;allocator2046,62530
	void *      data;data2047,62554
	isize       size;size2048,62573
} gbFileContents;gbFileContents2049,62592
		#define GB_PATH_SEPARATOR GB_PATH_SEPARATOR2066,63343
		#define GB_PATH_SEPARATOR GB_PATH_SEPARATOR2068,63383
typedef void *gbDllHandle;gbDllHandle2104,64838
typedef void (*gbDllProc)(void);gbDllProc2105,64865
typedef struct gbRandom {gbRandom2130,65537
	u32 offsets[8];offsets2131,65563
	u32 value;value2132,65580
} gbRandom;gbRandom2133,65592
#define GB_MAX_GAME_CONTROLLER_COUNT GB_MAX_GAME_CONTROLLER_COUNT2187,67266
typedef enum gbKeyType {gbKeyType2190,67313
	gbKey_Unknown = 0,  // Unhandled keygbKey_Unknown2191,67338
	gbKey_0 = '0',gbKey_02194,67455
	gbKey_1,gbKey_12195,67471
	gbKey_2,gbKey_22196,67481
	gbKey_3,gbKey_32197,67491
	gbKey_4,gbKey_42198,67501
	gbKey_5,gbKey_52199,67511
	gbKey_6,gbKey_62200,67521
	gbKey_7,gbKey_72201,67531
	gbKey_8,gbKey_82202,67541
	gbKey_9,gbKey_92203,67551
	gbKey_A = 'A',gbKey_A2205,67562
	gbKey_B,gbKey_B2206,67578
	gbKey_C,gbKey_C2207,67588
	gbKey_D,gbKey_D2208,67598
	gbKey_E,gbKey_E2209,67608
	gbKey_F,gbKey_F2210,67618
	gbKey_G,gbKey_G2211,67628
	gbKey_H,gbKey_H2212,67638
	gbKey_I,gbKey_I2213,67648
	gbKey_J,gbKey_J2214,67658
	gbKey_K,gbKey_K2215,67668
	gbKey_L,gbKey_L2216,67678
	gbKey_M,gbKey_M2217,67688
	gbKey_N,gbKey_N2218,67698
	gbKey_O,gbKey_O2219,67708
	gbKey_P,gbKey_P2220,67718
	gbKey_Q,gbKey_Q2221,67728
	gbKey_R,gbKey_R2222,67738
	gbKey_S,gbKey_S2223,67748
	gbKey_T,gbKey_T2224,67758
	gbKey_U,gbKey_U2225,67768
	gbKey_V,gbKey_V2226,67778
	gbKey_W,gbKey_W2227,67788
	gbKey_X,gbKey_X2228,67798
	gbKey_Y,gbKey_Y2229,67808
	gbKey_Z,gbKey_Z2230,67818
	gbKey_Lbracket  = '[',gbKey_Lbracket2232,67829
	gbKey_Rbracket  = ']',gbKey_Rbracket2233,67853
	gbKey_Semicolon = ';',gbKey_Semicolon2234,67877
	gbKey_Comma     = ',',gbKey_Comma2235,67901
	gbKey_Period    = '.',gbKey_Period2236,67925
	gbKey_Quote     = '\'',gbKey_Quote2237,67949
	gbKey_Slash     = '/',gbKey_Slash2238,67974
	gbKey_Backslash = '\\',gbKey_Backslash2239,67998
	gbKey_Grave     = '`',gbKey_Grave2240,68023
	gbKey_Equals    = '=',gbKey_Equals2241,68047
	gbKey_Minus     = '-',gbKey_Minus2242,68071
	gbKey_Space     = ' ',gbKey_Space2243,68095
	gbKey__Pad = 128,   // NOTE(bill): make sure ASCII is reservedgbKey__Pad2245,68120
	gbKey_Escape,       // EscapegbKey_Escape2247,68185
	gbKey_Lcontrol,     // Left ControlgbKey_Lcontrol2248,68216
	gbKey_Lshift,       // Left ShiftgbKey_Lshift2249,68253
	gbKey_Lalt,         // Left AltgbKey_Lalt2250,68288
	gbKey_Lsystem,      // Left OS specific: window (Windows and Linux), apple/cmd (MacOS X), ...gbKey_Lsystem2251,68321
	gbKey_Rcontrol,     // Right ControlgbKey_Rcontrol2252,68416
	gbKey_Rshift,       // Right ShiftgbKey_Rshift2253,68454
	gbKey_Ralt,         // Right AltgbKey_Ralt2254,68490
	gbKey_Rsystem,      // Right OS specific: window (Windows and Linux), apple/cmd (MacOS X), ...gbKey_Rsystem2255,68524
	gbKey_Menu,         // MenugbKey_Menu2256,68620
	gbKey_Return,       // ReturngbKey_Return2257,68649
	gbKey_Backspace,    // BackspacegbKey_Backspace2258,68680
	gbKey_Tab,          // TabulationgbKey_Tab2259,68714
	gbKey_Pageup,       // Page upgbKey_Pageup2260,68749
	gbKey_Pagedown,     // Page downgbKey_Pagedown2261,68781
	gbKey_End,          // EndgbKey_End2262,68815
	gbKey_Home,         // HomegbKey_Home2263,68843
	gbKey_Insert,       // InsertgbKey_Insert2264,68872
	gbKey_Delete,       // DeletegbKey_Delete2265,68903
	gbKey_Plus,         // +gbKey_Plus2266,68934
	gbKey_Subtract,     // -gbKey_Subtract2267,68960
	gbKey_Multiply,     // *gbKey_Multiply2268,68986
	gbKey_Divide,       // /gbKey_Divide2269,69012
	gbKey_Left,         // Left arrowgbKey_Left2270,69038
	gbKey_Right,        // Right arrowgbKey_Right2271,69073
	gbKey_Up,           // Up arrowgbKey_Up2272,69109
	gbKey_Down,         // Down arrowgbKey_Down2273,69142
	gbKey_Numpad0,      // Numpad 0gbKey_Numpad02274,69177
	gbKey_Numpad1,      // Numpad 1gbKey_Numpad12275,69210
	gbKey_Numpad2,      // Numpad 2gbKey_Numpad22276,69243
	gbKey_Numpad3,      // Numpad 3gbKey_Numpad32277,69276
	gbKey_Numpad4,      // Numpad 4gbKey_Numpad42278,69309
	gbKey_Numpad5,      // Numpad 5gbKey_Numpad52279,69342
	gbKey_Numpad6,      // Numpad 6gbKey_Numpad62280,69375
	gbKey_Numpad7,      // Numpad 7gbKey_Numpad72281,69408
	gbKey_Numpad8,      // Numpad 8gbKey_Numpad82282,69441
	gbKey_Numpad9,      // Numpad 9gbKey_Numpad92283,69474
	gbKey_NumpadDot,    // Numpad .gbKey_NumpadDot2284,69507
	gbKey_NumpadEnter,  // Numpad EntergbKey_NumpadEnter2285,69540
	gbKey_F1,           // F1gbKey_F12286,69577
	gbKey_F2,           // F2gbKey_F22287,69604
	gbKey_F3,           // F3gbKey_F32288,69631
	gbKey_F4,           // F4gbKey_F42289,69658
	gbKey_F5,           // F5gbKey_F52290,69685
	gbKey_F6,           // F6gbKey_F62291,69712
	gbKey_F7,           // F7gbKey_F72292,69739
	gbKey_F8,           // F8gbKey_F82293,69766
	gbKey_F9,           // F8gbKey_F92294,69793
	gbKey_F10,          // F10gbKey_F102295,69820
	gbKey_F11,          // F11gbKey_F112296,69848
	gbKey_F12,          // F12gbKey_F122297,69876
	gbKey_F13,          // F13gbKey_F132298,69904
	gbKey_F14,          // F14gbKey_F142299,69932
	gbKey_F15,          // F15gbKey_F152300,69960
	gbKey_Pause,        // PausegbKey_Pause2301,69988
	gbKey_Count,gbKey_Count2303,70019
} gbKeyType;gbKeyType2304,70033
typedef u8 gbKeyState;gbKeyState2307,70078
typedef enum gbKeyStateFlag {gbKeyStateFlag2308,70101
	gbKeyState_Down     = GB_BIT(0),gbKeyState_Down2309,70131
	gbKeyState_Pressed  = GB_BIT(1),gbKeyState_Pressed2310,70165
	gbKeyState_Released = GB_BIT(2)gbKeyState_Released2311,70199
} gbKeyStateFlag;gbKeyStateFlag2312,70232
typedef enum gbMouseButtonType {gbMouseButtonType2316,70313
	gbMouseButton_Left,gbMouseButton_Left2317,70346
	gbMouseButton_Middle,gbMouseButton_Middle2318,70367
	gbMouseButton_Right,gbMouseButton_Right2319,70390
	gbMouseButton_X1,gbMouseButton_X12320,70412
	gbMouseButton_X2,gbMouseButton_X22321,70431
	gbMouseButton_CountgbMouseButton_Count2323,70451
} gbMouseButtonType;gbMouseButtonType2324,70472
typedef enum gbControllerAxisType {gbControllerAxisType2326,70494
	gbControllerAxis_LeftX,gbControllerAxis_LeftX2327,70530
	gbControllerAxis_LeftY,gbControllerAxis_LeftY2328,70555
	gbControllerAxis_RightX,gbControllerAxis_RightX2329,70580
	gbControllerAxis_RightY,gbControllerAxis_RightY2330,70606
	gbControllerAxis_LeftTrigger,gbControllerAxis_LeftTrigger2331,70632
	gbControllerAxis_RightTrigger,gbControllerAxis_RightTrigger2332,70663
	gbControllerAxis_CountgbControllerAxis_Count2334,70696
} gbControllerAxisType;gbControllerAxisType2335,70720
typedef enum gbControllerButtonType {gbControllerButtonType2337,70745
	gbControllerButton_Up,gbControllerButton_Up2338,70783
	gbControllerButton_Down,gbControllerButton_Down2339,70807
	gbControllerButton_Left,gbControllerButton_Left2340,70833
	gbControllerButton_Right,gbControllerButton_Right2341,70859
	gbControllerButton_A,gbControllerButton_A2342,70886
	gbControllerButton_B,gbControllerButton_B2343,70909
	gbControllerButton_X,gbControllerButton_X2344,70932
	gbControllerButton_Y,gbControllerButton_Y2345,70955
	gbControllerButton_LeftShoulder,gbControllerButton_LeftShoulder2346,70978
	gbControllerButton_RightShoulder,gbControllerButton_RightShoulder2347,71012
	gbControllerButton_Back,gbControllerButton_Back2348,71047
	gbControllerButton_Start,gbControllerButton_Start2349,71073
	gbControllerButton_LeftThumb,gbControllerButton_LeftThumb2350,71100
	gbControllerButton_RightThumb,gbControllerButton_RightThumb2351,71131
	gbControllerButton_CountgbControllerButton_Count2353,71164
} gbControllerButtonType;gbControllerButtonType2354,71190
typedef struct gbGameController {gbGameController2356,71217
	b16 is_connected, is_analog;is_connected2357,71251
	b16 is_connected, is_analog;is_analog2357,71251
	f32        axes[gbControllerAxis_Count];axes2359,71282
	gbKeyState buttons[gbControllerButton_Count];buttons2360,71324
} gbGameController;gbGameController2361,71371
	typedef struct _XINPUT_GAMEPAD XINPUT_GAMEPAD;XINPUT_GAMEPAD2364,71423
	typedef struct _XINPUT_STATE   XINPUT_STATE;XINPUT_STATE2365,71471
	typedef struct _XINPUT_VIBRATION XINPUT_VIBRATION;XINPUT_VIBRATION2366,71517
	#define GB_XINPUT_GET_STATE(GB_XINPUT_GET_STATE2368,71570
	typedef GB_XINPUT_GET_STATE(gbXInputGetStateProc);GB_XINPUT_GET_STATE2369,71683
	#define GB_XINPUT_SET_STATE(GB_XINPUT_SET_STATE2371,71736
	typedef GB_XINPUT_SET_STATE(gbXInputSetStateProc);GB_XINPUT_SET_STATE2372,71857
typedef enum gbWindowFlag {gbWindowFlag2376,71918
	gbWindow_Fullscreen        = GB_BIT(0),gbWindow_Fullscreen2377,71946
	gbWindow_Hidden            = GB_BIT(1),gbWindow_Hidden2378,71987
	gbWindow_Borderless        = GB_BIT(2),gbWindow_Borderless2379,72028
	gbWindow_Resizable         = GB_BIT(3),gbWindow_Resizable2380,72069
	gbWindow_Minimized         = GB_BIT(4),gbWindow_Minimized2381,72110
	gbWindow_Maximized         = GB_BIT(5),gbWindow_Maximized2382,72151
	gbWindow_FullscreenDesktop = gbWindow_Fullscreen | gbWindow_Borderless,gbWindow_FullscreenDesktop2383,72192
} gbWindowFlag;gbWindowFlag2384,72265
typedef enum gbRendererType {gbRendererType2386,72282
	gbRenderer_Opengl,gbRenderer_Opengl2387,72312
	gbRenderer_Software,gbRenderer_Software2388,72332
	gbRenderer_Count,gbRenderer_Count2390,72355
} gbRendererType;gbRendererType2391,72374
typedef struct tagBITMAPINFOHEADER {tagBITMAPINFOHEADER2396,72449
	unsigned long biSize;biSize2397,72486
	long          biWidth;biWidth2398,72509
	long          biHeight;biHeight2399,72533
	u16           biPlanes;biPlanes2400,72558
	u16           biBitCount;biBitCount2401,72583
	unsigned long biCompression;biCompression2402,72610
	unsigned long biSizeImage;biSizeImage2403,72640
	long          biXPelsPerMeter;biXPelsPerMeter2404,72668
	long          biYPelsPerMeter;biYPelsPerMeter2405,72700
	unsigned long biClrUsed;biClrUsed2406,72732
	unsigned long biClrImportant;biClrImportant2407,72758
} BITMAPINFOHEADER, *PBITMAPINFOHEADER;BITMAPINFOHEADER2408,72789
} BITMAPINFOHEADER, *PBITMAPINFOHEADER;PBITMAPINFOHEADER2408,72789
typedef struct tagRGBQUAD {tagRGBQUAD2409,72829
	u8 rgbBlue;rgbBlue2410,72857
	u8 rgbGreen;rgbGreen2411,72870
	u8 rgbRed;rgbRed2412,72884
	u8 rgbReserved;rgbReserved2413,72896
} RGBQUAD;RGBQUAD2414,72913
typedef struct tagBITMAPINFO {tagBITMAPINFO2415,72924
	BITMAPINFOHEADER bmiHeader;bmiHeader2416,72955
	RGBQUAD          bmiColors[1];bmiColors2417,72984
} BITMAPINFO, *PBITMAPINFO;BITMAPINFO2418,73016
} BITMAPINFO, *PBITMAPINFO;PBITMAPINFO2418,73016
typedef struct gbPlatform {gbPlatform2421,73052
	b32 is_initialized;is_initialized2422,73080
	void *window_handle;window_handle2424,73102
	i32   window_x, window_y;window_x2425,73124
	i32   window_x, window_y;window_y2425,73124
	i32   window_width, window_height;window_width2426,73151
	i32   window_width, window_height;window_height2426,73151
	u32   window_flags;window_flags2427,73187
	b16   window_is_closed, window_has_focus;window_is_closed2428,73208
	b16   window_is_closed, window_has_focus;window_has_focus2428,73208
	void *win32_dc;win32_dc2431,73283
	void *osx_autorelease_pool; // TODO(bill): Is this really needed?osx_autorelease_pool2433,73329
	gbRendererType renderer_type;renderer_type2436,73404
	union {__anona24233aa010a2437,73435
		struct {__anona24233aa02082438,73444
			void *      context;context2439,73455
			i32         major;major2440,73479
			i32         minor;minor2441,73501
			b16         core, compatible;core2442,73523
			b16         core, compatible;compatible2442,73523
			gbDllHandle dll_handle;dll_handle2443,73556
		} opengl;opengl2444,73583
		struct {__anona24233aa03082447,73632
			BITMAPINFO win32_bmi;win32_bmi2449,73674
			void *     memory;memory2451,73706
			isize      memory_size;memory_size2452,73728
			i32        pitch;pitch2453,73755
			i32        bits_per_pixel;bits_per_pixel2454,73776
		} sw_framebuffer;sw_framebuffer2455,73806
	gbKeyState keys[gbKey_Count];keys2458,73831
	struct {__anona24233aa04082459,73862
		gbKeyState control;control2460,73872
		gbKeyState alt;alt2461,73894
		gbKeyState shift;shift2462,73912
	} key_modifiers;key_modifiers2463,73932
	Rune  char_buffer[256];char_buffer2465,73951
	isize char_buffer_count;char_buffer_count2466,73976
	b32 mouse_clip;mouse_clip2468,74003
	i32 mouse_x, mouse_y;mouse_x2469,74020
	i32 mouse_x, mouse_y;mouse_y2469,74020
	i32 mouse_dx, mouse_dy; // NOTE(bill): Not raw mouse movementmouse_dx2470,74043
	i32 mouse_dx, mouse_dy; // NOTE(bill): Not raw mouse movementmouse_dy2470,74043
	i32 mouse_raw_dx, mouse_raw_dy; // NOTE(bill): Raw mouse movementmouse_raw_dx2471,74106
	i32 mouse_raw_dx, mouse_raw_dy; // NOTE(bill): Raw mouse movementmouse_raw_dy2471,74106
	f32 mouse_wheel_delta;mouse_wheel_delta2472,74173
	gbKeyState mouse_buttons[gbMouseButton_Count];mouse_buttons2473,74197
	gbGameController game_controllers[GB_MAX_GAME_CONTROLLER_COUNT];game_controllers2475,74246
	f64              curr_time;curr_time2477,74313
	f64              dt_for_frame;dt_for_frame2478,74342
	b32              quit_requested;quit_requested2479,74374
	struct {__anona24233aa05082482,74440
		gbXInputGetStateProc *get_state;get_state2483,74450
		gbXInputSetStateProc *set_state;set_state2484,74485
	} xinput;xinput2485,74520
} gbPlatform;gbPlatform2487,74538
typedef struct gbVideoMode {gbVideoMode2490,74554
	i32 width, height;width2491,74583
	i32 width, height;height2491,74583
	i32 bits_per_pixel;bits_per_pixel2492,74603
} gbVideoMode;gbVideoMode2493,74624
#define GB_IMPLEMENTATION_DONEGB_IMPLEMENTATION_DONE2586,77346
	#define WINAPI WINAPI2600,77583
	#define WINAPIV WINAPIV2601,77611
	#define CALLBACK CALLBACK2602,77637
	#define MAX_PATH MAX_PATH2603,77665
	#define CCHDEVICENAME CCHDEVICENAME2604,77687
	#define CCHFORMNAME CCHFORMNAME2605,77713
	typedef unsigned long DWORD;DWORD2607,77740
	typedef int WINBOOL;WINBOOL2608,77770
		typedef WINBOOL BOOL;BOOL2611,77834
		#define BOOL BOOL2613,77866
	typedef unsigned char BYTE;BYTE2615,77898
	typedef unsigned short WORD;WORD2617,77935
	typedef float FLOAT;FLOAT2618,77965
	typedef int INT;INT2619,77987
	typedef unsigned int UINT;UINT2620,78005
	typedef short SHORT;SHORT2621,78033
	typedef long LONG;LONG2622,78055
	typedef long long LONGLONG;LONGLONG2623,78075
	typedef unsigned short USHORT;USHORT2624,78104
	typedef unsigned long ULONG;ULONG2625,78136
	typedef unsigned long long ULONGLONG;ULONGLONG2626,78166
	typedef UINT WPARAM;WPARAM2628,78206
	typedef LONG LPARAM;LPARAM2629,78228
	typedef LONG LRESULT;LRESULT2630,78250
	typedef LONG HRESULT;HRESULT2632,78299
	#define _HRESULT_DEFINED_HRESULT_DEFINED2633,78322
	typedef WORD ATOM;ATOM2636,78379
	typedef void *HANDLE;HANDLE2638,78427
	typedef HANDLE HGLOBAL;HGLOBAL2639,78450
	typedef HANDLE HLOCAL;HLOCAL2640,78475
	typedef HANDLE GLOBALHANDLE;GLOBALHANDLE2641,78499
	typedef HANDLE LOCALHANDLE;LOCALHANDLE2642,78529
	typedef void *HGDIOBJ;HGDIOBJ2643,78558
	#define DECLARE_HANDLE(DECLARE_HANDLE2645,78583
	typedef HKEY *PHKEY;PHKEY2657,78911
	typedef HINSTANCE HMODULE;HMODULE2661,79013
	typedef int HFILE;HFILE2675,79335
	typedef HICON HCURSOR;HCURSOR2676,79355
	typedef DWORD COLORREF;COLORREF2677,79379
	typedef int (WINAPI *FARPROC)();FARPROC2678,79404
	typedef int (WINAPI *NEARPROC)();NEARPROC2679,79438
	typedef int (WINAPI *PROC)();PROC2680,79473
	typedef LRESULT (CALLBACK *WNDPROC)(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);WNDPROC2681,79504
	typedef unsigned __int64 ULONG_PTR;ULONG_PTR2684,79615
	typedef signed __int64 LONG_PTR;LONG_PTR2685,79652
	typedef unsigned long ULONG_PTR;ULONG_PTR2687,79693
	typedef signed long LONG_PTR;LONG_PTR2688,79727
	typedef ULONG_PTR DWORD_PTR;DWORD_PTR2690,79766
	typedef struct tagRECT {tagRECT2692,79797
		LONG left;left2693,79823
		LONG top;top2694,79836
		LONG right;right2695,79848
		LONG bottom;bottom2696,79862
	} RECT;RECT2697,79877
	typedef struct tagRECTL {tagRECTL2698,79886
		LONG left;left2699,79913
		LONG top;top2700,79926
		LONG right;right2701,79938
		LONG bottom;bottom2702,79952
	} RECTL;RECTL2703,79967
	typedef struct tagPOINT {tagPOINT2704,79977
		LONG x;x2705,80004
		LONG y;y2706,80014
	} POINT;POINT2707,80024
	typedef struct tagSIZE {tagSIZE2708,80034
		LONG cx;cx2709,80060
		LONG cy;cy2710,80071
	} SIZE;SIZE2711,80082
	typedef struct tagPOINTS {tagPOINTS2712,80091
		SHORT x;x2713,80119
		SHORT y;y2714,80130
	} POINTS;POINTS2715,80141
	typedef struct _SECURITY_ATTRIBUTES {_SECURITY_ATTRIBUTES2716,80152
		DWORD  nLength;nLength2717,80191
		HANDLE lpSecurityDescriptor;lpSecurityDescriptor2718,80209
		BOOL   bInheritHandle;bInheritHandle2719,80240
	} SECURITY_ATTRIBUTES;SECURITY_ATTRIBUTES2720,80265
	typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {_LOGICAL_PROCESSOR_RELATIONSHIP2721,80289
		RelationProcessorCore,RelationProcessorCore2722,80337
		RelationNumaNode,RelationNumaNode2723,80362
		RelationCache,RelationCache2724,80382
		RelationProcessorPackage,RelationProcessorPackage2725,80399
		RelationGroup,RelationGroup2726,80427
		RelationAll               = 0xffffRelationAll2727,80444
	} LOGICAL_PROCESSOR_RELATIONSHIP;LOGICAL_PROCESSOR_RELATIONSHIP2728,80481
	typedef enum _PROCESSOR_CACHE_TYPE {_PROCESSOR_CACHE_TYPE2729,80516
		CacheUnified,CacheUnified2730,80554
		CacheInstruction,CacheInstruction2731,80570
		CacheData,CacheData2732,80590
		CacheTraceCacheTrace2733,80603
	} PROCESSOR_CACHE_TYPE;PROCESSOR_CACHE_TYPE2734,80616
	typedef struct _CACHE_DESCRIPTOR {_CACHE_DESCRIPTOR2735,80641
		BYTE                 Level;Level2736,80677
		BYTE                 Associativity;Associativity2737,80707
		WORD                 LineSize;LineSize2738,80745
		DWORD                Size;Size2739,80778
		PROCESSOR_CACHE_TYPE Type;Type2740,80807
	} CACHE_DESCRIPTOR;CACHE_DESCRIPTOR2741,80836
	typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {_SYSTEM_LOGICAL_PROCESSOR_INFORMATION2742,80857
		ULONG_PTR                       ProcessorMask;ProcessorMask2743,80913
		LOGICAL_PROCESSOR_RELATIONSHIP Relationship;Relationship2744,80962
		union {__anona24233aa060a2745,81009
			struct {__anona24233aa07082746,81019
				BYTE Flags;Flags2747,81031
			} ProcessorCore;ProcessorCore2748,81047
			struct {__anona24233aa08082749,81067
				DWORD NodeNumber;NodeNumber2750,81079
			} NumaNode;NumaNode2751,81101
			CACHE_DESCRIPTOR Cache;Cache2752,81116
			ULONGLONG        Reserved[2];Reserved2753,81143
	} SYSTEM_LOGICAL_PROCESSOR_INFORMATION;SYSTEM_LOGICAL_PROCESSOR_INFORMATION2755,81181
	typedef struct _MEMORY_BASIC_INFORMATION {_MEMORY_BASIC_INFORMATION2756,81222
		void *BaseAddress;BaseAddress2757,81266
		void *AllocationBase;AllocationBase2758,81287
		DWORD AllocationProtect;AllocationProtect2759,81311
		usize RegionSize;RegionSize2760,81338
		DWORD State;State2761,81358
		DWORD Protect;Protect2762,81373
		DWORD Type;Type2763,81390
	} MEMORY_BASIC_INFORMATION;MEMORY_BASIC_INFORMATION2764,81404
	typedef struct _SYSTEM_INFO {_SYSTEM_INFO2765,81433
		union {__anona24233aa090a2766,81464
			DWORD   dwOemId;dwOemId2767,81474
			struct {__anona24233aa0a082768,81494
				WORD wProcessorArchitecture;wProcessorArchitecture2769,81506
				WORD wReserved;wReserved2770,81539
		DWORD     dwPageSize;dwPageSize2773,81570
		void *    lpMinimumApplicationAddress;lpMinimumApplicationAddress2774,81594
		void *    lpMaximumApplicationAddress;lpMaximumApplicationAddress2775,81635
		DWORD_PTR dwActiveProcessorMask;dwActiveProcessorMask2776,81676
		DWORD     dwNumberOfProcessors;dwNumberOfProcessors2777,81711
		DWORD     dwProcessorType;dwProcessorType2778,81745
		DWORD     dwAllocationGranularity;dwAllocationGranularity2779,81774
		WORD      wProcessorLevel;wProcessorLevel2780,81811
		WORD      wProcessorRevision;wProcessorRevision2781,81840
	} SYSTEM_INFO;SYSTEM_INFO2782,81872
	typedef union _LARGE_INTEGER {_LARGE_INTEGER2783,81888
		struct {__anona24233aa0b082784,81920
			DWORD LowPart;LowPart2785,81931
			LONG  HighPart;HighPart2786,81949
		struct {__anona24233aa0c082788,81973
			DWORD LowPart;LowPart2789,81984
			LONG  HighPart;HighPart2790,82002
		} u;u2791,82021
		LONGLONG QuadPart;QuadPart2792,82028
	} LARGE_INTEGER;LARGE_INTEGER2793,82049
	typedef union _ULARGE_INTEGER {_ULARGE_INTEGER2794,82067
		struct {__anona24233aa0d082795,82100
			DWORD LowPart;LowPart2796,82111
			DWORD HighPart;HighPart2797,82129
		struct {__anona24233aa0e082799,82153
			DWORD LowPart;LowPart2800,82164
			DWORD HighPart;HighPart2801,82182
		} u;u2802,82201
		ULONGLONG QuadPart;QuadPart2803,82208
	} ULARGE_INTEGER;ULARGE_INTEGER2804,82230
	typedef struct _OVERLAPPED {_OVERLAPPED2806,82250
		ULONG_PTR Internal;Internal2807,82280
		ULONG_PTR InternalHigh;InternalHigh2808,82302
		union {__anona24233aa0f0a2809,82328
			struct {__anona24233aa10082810,82338
				DWORD Offset;Offset2811,82350
				DWORD OffsetHigh;OffsetHigh2812,82368
			void *Pointer;Pointer2814,82396
		HANDLE hEvent;hEvent2816,82419
	} OVERLAPPED;OVERLAPPED2817,82436
	typedef struct _FILETIME {_FILETIME2818,82451
		DWORD dwLowDateTime;dwLowDateTime2819,82479
		DWORD dwHighDateTime;dwHighDateTime2820,82502
	} FILETIME;FILETIME2821,82526
	typedef struct _WIN32_FIND_DATAW {_WIN32_FIND_DATAW2822,82539
		DWORD    dwFileAttributes;dwFileAttributes2823,82575
		FILETIME ftCreationTime;ftCreationTime2824,82604
		FILETIME ftLastAccessTime;ftLastAccessTime2825,82631
		FILETIME ftLastWriteTime;ftLastWriteTime2826,82660
		DWORD    nFileSizeHigh;nFileSizeHigh2827,82688
		DWORD    nFileSizeLow;nFileSizeLow2828,82714
		DWORD    dwReserved0;dwReserved02829,82739
		DWORD    dwReserved1;dwReserved12830,82763
		wchar_t  cFileName[MAX_PATH];cFileName2831,82787
		wchar_t  cAlternateFileName[14];cAlternateFileName2832,82819
	} WIN32_FIND_DATAW;WIN32_FIND_DATAW2833,82854
	typedef struct _WIN32_FILE_ATTRIBUTE_DATA {_WIN32_FILE_ATTRIBUTE_DATA2834,82875
		DWORD    dwFileAttributes;dwFileAttributes2835,82920
		FILETIME ftCreationTime;ftCreationTime2836,82949
		FILETIME ftLastAccessTime;ftLastAccessTime2837,82976
		FILETIME ftLastWriteTime;ftLastWriteTime2838,83005
		DWORD    nFileSizeHigh;nFileSizeHigh2839,83033
		DWORD    nFileSizeLow;nFileSizeLow2840,83059
	} WIN32_FILE_ATTRIBUTE_DATA;WIN32_FILE_ATTRIBUTE_DATA2841,83084
	typedef enum _GET_FILEEX_INFO_LEVELS {_GET_FILEEX_INFO_LEVELS2842,83114
		GetFileExInfoStandard,GetFileExInfoStandard2843,83154
		GetFileExMaxInfoLevelGetFileExMaxInfoLevel2844,83179
	} GET_FILEEX_INFO_LEVELS;GET_FILEEX_INFO_LEVELS2845,83203
	typedef struct tagRAWINPUTHEADER {tagRAWINPUTHEADER2846,83230
		DWORD  dwType;dwType2847,83266
		DWORD  dwSize;dwSize2848,83283
		HANDLE hDevice;hDevice2849,83300
		WPARAM wParam;wParam2850,83318
	} RAWINPUTHEADER;RAWINPUTHEADER2851,83335
	typedef struct tagRAWINPUTDEVICE {tagRAWINPUTDEVICE2852,83354
		USHORT usUsagePage;usUsagePage2853,83390
		USHORT usUsage;usUsage2854,83412
		DWORD  dwFlags;dwFlags2855,83430
		HWND   hwndTarget;hwndTarget2856,83448
	} RAWINPUTDEVICE;RAWINPUTDEVICE2857,83469
	typedef struct tagRAWMOUSE {tagRAWMOUSE2858,83488
		WORD usFlags;usFlags2859,83518
		union {__anona24233aa110a2860,83534
			ULONG ulButtons;ulButtons2861,83544
			struct {__anona24233aa12082862,83564
				WORD usButtonFlags;usButtonFlags2863,83576
				WORD usButtonData;usButtonData2864,83600
		ULONG ulRawButtons;ulRawButtons2867,83634
		LONG  lLastX;lLastX2868,83656
		LONG  lLastY;lLastY2869,83672
		ULONG ulExtraInformation;ulExtraInformation2870,83688
	} RAWMOUSE;RAWMOUSE2871,83716
	typedef struct tagRAWKEYBOARD {tagRAWKEYBOARD2872,83729
		WORD  MakeCode;MakeCode2873,83762
		WORD  Flags;Flags2874,83780
		WORD  Reserved;Reserved2875,83795
		WORD  VKey;VKey2876,83813
		UINT  Message;Message2877,83827
		ULONG ExtraInformation;ExtraInformation2878,83844
	} RAWKEYBOARD;RAWKEYBOARD2879,83870
	typedef struct tagRAWHID {tagRAWHID2880,83886
		DWORD dwSizeHid;dwSizeHid2881,83914
		DWORD dwCount;dwCount2882,83933
		BYTE  bRawData[1];bRawData2883,83950
	} RAWHID;RAWHID2884,83971
	typedef struct tagRAWINPUT {tagRAWINPUT2885,83982
		RAWINPUTHEADER header;header2886,84012
		union {__anona24233aa130a2887,84037
			RAWMOUSE    mouse;mouse2888,84047
			RAWKEYBOARD keyboard;keyboard2889,84069
			RAWHID      hid;hid2890,84094
		} data;data2891,84114
	} RAWINPUT;RAWINPUT2892,84124
	typedef struct tagWNDCLASSEXW {tagWNDCLASSEXW2893,84137
		UINT           cbSize;cbSize2894,84170
		UINT           style;style2895,84195
		WNDPROC        lpfnWndProc;lpfnWndProc2896,84219
		INT            cbClsExtra;cbClsExtra2897,84249
		INT            cbWndExtra;cbWndExtra2898,84278
		HINSTANCE      hInstance;hInstance2899,84307
		HICON          hIcon;hIcon2900,84335
		HCURSOR        hCursor;hCursor2901,84359
		HANDLE         hbrBackground;hbrBackground2902,84385
		wchar_t const *lpszMenuName;lpszMenuName2903,84417
		wchar_t const *lpszClassName;lpszClassName2904,84448
		HICON          hIconSm;hIconSm2905,84480
	} WNDCLASSEXW;WNDCLASSEXW2906,84506
	typedef struct _POINTL {_POINTL2907,84522
		LONG x;x2908,84548
		LONG y;y2909,84558
	} POINTL;POINTL2910,84568
	typedef struct _devicemodew {_devicemodew2911,84579
		wchar_t dmDeviceName[CCHDEVICENAME];dmDeviceName2912,84610
		WORD    dmSpecVersion;dmSpecVersion2913,84649
		WORD    dmDriverVersion;dmDriverVersion2914,84674
		WORD    dmSize;dmSize2915,84701
		WORD    dmDriverExtra;dmDriverExtra2916,84719
		DWORD   dmFields;dmFields2917,84744
		union {__anona24233aa140a2918,84764
			struct {__anona24233aa15082919,84774
				short dmOrientation;dmOrientation2920,84786
				short dmPaperSize;dmPaperSize2921,84811
				short dmPaperLength;dmPaperLength2922,84834
				short dmPaperWidth;dmPaperWidth2923,84859
				short dmScale;dmScale2924,84883
				short dmCopies;dmCopies2925,84902
				short dmDefaultSource;dmDefaultSource2926,84922
				short dmPrintQuality;dmPrintQuality2927,84949
			struct {__anona24233aa16082929,84981
				POINTL dmPosition;dmPosition2930,84993
				DWORD  dmDisplayOrientation;dmDisplayOrientation2931,85016
				DWORD  dmDisplayFixedOutput;dmDisplayFixedOutput2932,85049
		short   dmColor;dmColor2935,85093
		short   dmDuplex;dmDuplex2936,85112
		short   dmYResolution;dmYResolution2937,85132
		short   dmTTOption;dmTTOption2938,85157
		short   dmCollate;dmCollate2939,85179
		wchar_t dmFormName[CCHFORMNAME];dmFormName2940,85200
		WORD    dmLogPixels;dmLogPixels2941,85235
		DWORD   dmBitsPerPel;dmBitsPerPel2942,85258
		DWORD   dmPelsWidth;dmPelsWidth2943,85282
		DWORD   dmPelsHeight;dmPelsHeight2944,85305
		union {__anona24233aa170a2945,85329
			DWORD dmDisplayFlags;dmDisplayFlags2946,85339
			DWORD dmNup;dmNup2947,85364
		DWORD dmDisplayFrequency;dmDisplayFrequency2949,85385
		DWORD dmICMMethod;dmICMMethod2951,85437
		DWORD dmICMIntent;dmICMIntent2952,85458
		DWORD dmMediaType;dmMediaType2953,85479
		DWORD dmDitherType;dmDitherType2954,85500
		DWORD dmReserved1;dmReserved12955,85522
		DWORD dmReserved2;dmReserved22956,85543
		DWORD dmPanningWidth;dmPanningWidth2958,85616
		DWORD dmPanningHeight;dmPanningHeight2959,85640
	} DEVMODEW;DEVMODEW2962,85681
	typedef struct tagPIXELFORMATDESCRIPTOR {tagPIXELFORMATDESCRIPTOR2963,85694
		WORD  nSize;nSize2964,85737
		WORD  nVersion;nVersion2965,85752
		DWORD dwFlags;dwFlags2966,85770
		BYTE  iPixelType;iPixelType2967,85787
		BYTE  cColorBits;cColorBits2968,85807
		BYTE  cRedBits;cRedBits2969,85827
		BYTE  cRedShift;cRedShift2970,85845
		BYTE  cGreenBits;cGreenBits2971,85864
		BYTE  cGreenShift;cGreenShift2972,85884
		BYTE  cBlueBits;cBlueBits2973,85905
		BYTE  cBlueShift;cBlueShift2974,85924
		BYTE  cAlphaBits;cAlphaBits2975,85944
		BYTE  cAlphaShift;cAlphaShift2976,85964
		BYTE  cAccumBits;cAccumBits2977,85985
		BYTE  cAccumRedBits;cAccumRedBits2978,86005
		BYTE  cAccumGreenBits;cAccumGreenBits2979,86028
		BYTE  cAccumBlueBits;cAccumBlueBits2980,86053
		BYTE  cAccumAlphaBits;cAccumAlphaBits2981,86077
		BYTE  cDepthBits;cDepthBits2982,86102
		BYTE  cStencilBits;cStencilBits2983,86122
		BYTE  cAuxBuffers;cAuxBuffers2984,86144
		BYTE  iLayerType;iLayerType2985,86165
		BYTE  bReserved;bReserved2986,86185
		DWORD dwLayerMask;dwLayerMask2987,86204
		DWORD dwVisibleMask;dwVisibleMask2988,86225
		DWORD dwDamageMask;dwDamageMask2989,86248
	} PIXELFORMATDESCRIPTOR;PIXELFORMATDESCRIPTOR2990,86270
	typedef struct tagMSG {     // msgtagMSG2991,86296
		HWND   hwnd;hwnd2992,86332
		UINT   message;message2993,86347
		WPARAM wParam;wParam2994,86365
		LPARAM lParam;lParam2995,86382
		DWORD time;time2996,86399
		POINT pt;pt2997,86413
	} MSG;MSG2998,86425
	typedef struct tagWINDOWPLACEMENT {tagWINDOWPLACEMENT2999,86433
		UINT length;length3000,86470
		UINT flags;flags3001,86485
		UINT showCmd;showCmd3002,86499
		POINT ptMinPosition;ptMinPosition3003,86515
		POINT ptMaxPosition;ptMaxPosition3004,86538
		RECT rcNormalPosition;rcNormalPosition3005,86561
	} WINDOWPLACEMENT;WINDOWPLACEMENT3006,86586
	typedef struct tagMONITORINFO {tagMONITORINFO3007,86606
		DWORD cbSize;cbSize3008,86639
		RECT  rcMonitor;rcMonitor3009,86655
		RECT  rcWork;rcWork3010,86674
		DWORD dwFlags;dwFlags3011,86690
	} MONITORINFO;MONITORINFO3012,86707
	#define INFINITE INFINITE3014,86724
	#define INVALID_HANDLE_VALUE INVALID_HANDLE_VALUE3015,86754
	typedef DWORD WINAPI THREAD_START_ROUTINE(void *parameter);THREAD_START_ROUTINE3018,86809
	#define PAGE_NOACCESS PAGE_NOACCESS3037,88139
	#define PAGE_READONLY PAGE_READONLY3038,88176
	#define PAGE_READWRITE PAGE_READWRITE3039,88213
	#define PAGE_WRITECOPY PAGE_WRITECOPY3040,88250
	#define PAGE_EXECUTE PAGE_EXECUTE3041,88287
	#define PAGE_EXECUTE_READ PAGE_EXECUTE_READ3042,88324
	#define PAGE_EXECUTE_READWRITE PAGE_EXECUTE_READWRITE3043,88361
	#define PAGE_EXECUTE_WRITECOPY PAGE_EXECUTE_WRITECOPY3044,88398
	#define PAGE_GUARD PAGE_GUARD3045,88435
	#define PAGE_NOCACHE PAGE_NOCACHE3046,88472
	#define PAGE_WRITECOMBINE PAGE_WRITECOMBINE3047,88509
	#define MEM_COMMIT MEM_COMMIT3049,88547
	#define MEM_RESERVE MEM_RESERVE3050,88584
	#define MEM_DECOMMIT MEM_DECOMMIT3051,88621
	#define MEM_RELEASE MEM_RELEASE3052,88658
	#define MEM_FREE MEM_FREE3053,88695
	#define MEM_PRIVATE MEM_PRIVATE3054,88732
	#define MEM_MAPPED MEM_MAPPED3055,88769
	#define MEM_RESET MEM_RESET3056,88806
	#define MEM_TOP_DOWN MEM_TOP_DOWN3057,88843
	#define MEM_LARGE_PAGES MEM_LARGE_PAGES3058,88880
	#define MEM_4MB_PAGES MEM_4MB_PAGES3059,88917
	#define VK_UNKNOWN VK_UNKNOWN3071,89357
	#define VK_LBUTTON VK_LBUTTON3072,89379
	#define VK_RBUTTON VK_RBUTTON3073,89405
	#define VK_CANCEL VK_CANCEL3074,89431
	#define VK_MBUTTON VK_MBUTTON3075,89457
	#define VK_XBUTTON1 VK_XBUTTON13076,89483
	#define VK_XBUTTON2 VK_XBUTTON23077,89509
	#define VK_BACK VK_BACK3078,89535
	#define VK_TAB VK_TAB3079,89557
	#define VK_CLEAR VK_CLEAR3080,89578
	#define VK_RETURN VK_RETURN3081,89601
	#define VK_SHIFT VK_SHIFT3082,89625
	#define VK_CONTROL VK_CONTROL3083,89648
	#define VK_MENU VK_MENU3084,89685
	#define VK_PAUSE VK_PAUSE3085,89718
	#define VK_CAPITAL VK_CAPITAL3086,89754
	#define VK_KANA VK_KANA3087,89796
	#define VK_HANGUL VK_HANGUL3088,89857
	#define VK_JUNJA VK_JUNJA3089,89900
	#define VK_FINAL VK_FINAL3090,89941
	#define VK_HANJA VK_HANJA3091,89982
	#define VK_KANJI VK_KANJI3092,90023
	#define VK_ESCAPE VK_ESCAPE3093,90064
	#define VK_CONVERT VK_CONVERT3094,90099
	#define VK_NONCONVERT VK_NONCONVERT3095,90139
	#define VK_ACCEPT VK_ACCEPT3096,90185
	#define VK_MODECHANGE VK_MODECHANGE3097,90223
	#define VK_SPACE VK_SPACE3098,90278
	#define VK_PRIOR VK_PRIOR3099,90314
	#define VK_NEXT VK_NEXT3100,90352
	#define VK_END VK_END3101,90391
	#define VK_HOME VK_HOME3102,90423
	#define VK_LEFT VK_LEFT3103,90457
	#define VK_UP VK_UP3104,90497
	#define VK_RIGHT VK_RIGHT3105,90533
	#define VK_DOWN VK_DOWN3106,90575
	#define VK_SELECT VK_SELECT3107,90615
	#define VK_PRINT VK_PRINT3108,90653
	#define VK_EXECUTE VK_EXECUTE3109,90689
	#define VK_SNAPSHOT VK_SNAPSHOT3110,90729
	#define VK_INSERT VK_INSERT3111,90775
	#define VK_DELETE VK_DELETE3112,90810
	#define VK_HELP VK_HELP3113,90845
	#define VK_0 VK_03114,90879
	#define VK_1 VK_13115,90898
	#define VK_2 VK_23116,90917
	#define VK_3 VK_33117,90936
	#define VK_4 VK_43118,90955
	#define VK_5 VK_53119,90974
	#define VK_6 VK_63120,90993
	#define VK_7 VK_73121,91012
	#define VK_8 VK_83122,91031
	#define VK_9 VK_93123,91050
	#define VK_A VK_A3124,91069
	#define VK_B VK_B3125,91088
	#define VK_C VK_C3126,91107
	#define VK_D VK_D3127,91126
	#define VK_E VK_E3128,91145
	#define VK_F VK_F3129,91164
	#define VK_G VK_G3130,91183
	#define VK_H VK_H3131,91202
	#define VK_I VK_I3132,91221
	#define VK_J VK_J3133,91240
	#define VK_K VK_K3134,91259
	#define VK_L VK_L3135,91278
	#define VK_M VK_M3136,91297
	#define VK_N VK_N3137,91316
	#define VK_O VK_O3138,91335
	#define VK_P VK_P3139,91354
	#define VK_Q VK_Q3140,91373
	#define VK_R VK_R3141,91392
	#define VK_S VK_S3142,91411
	#define VK_T VK_T3143,91430
	#define VK_U VK_U3144,91449
	#define VK_V VK_V3145,91468
	#define VK_W VK_W3146,91487
	#define VK_X VK_X3147,91506
	#define VK_Y VK_Y3148,91525
	#define VK_Z VK_Z3149,91544
	#define VK_LWIN VK_LWIN3150,91563
	#define VK_RWIN VK_RWIN3151,91634
	#define VK_APPS VK_APPS3152,91696
	#define VK_SLEEP VK_SLEEP3153,91757
	#define VK_NUMPAD0 VK_NUMPAD03155,91819
	#define VK_NUMPAD1 VK_NUMPAD13156,91844
	#define VK_NUMPAD2 VK_NUMPAD23157,91869
	#define VK_NUMPAD3 VK_NUMPAD33158,91894
	#define VK_NUMPAD4 VK_NUMPAD43159,91919
	#define VK_NUMPAD5 VK_NUMPAD53160,91944
	#define VK_NUMPAD6 VK_NUMPAD63161,91969
	#define VK_NUMPAD7 VK_NUMPAD73162,91994
	#define VK_NUMPAD8 VK_NUMPAD83163,92019
	#define VK_NUMPAD9 VK_NUMPAD93164,92044
	#define VK_MULTIPLY VK_MULTIPLY3165,92069
	#define VK_ADD VK_ADD3166,92095
	#define VK_SEPARATOR VK_SEPARATOR3167,92116
	#define VK_SUBTRACT VK_SUBTRACT3168,92143
	#define VK_DECIMAL VK_DECIMAL3169,92169
	#define VK_DIVIDE VK_DIVIDE3170,92194
	#define VK_F1 VK_F13171,92218
	#define VK_F2 VK_F23172,92238
	#define VK_F3 VK_F33173,92258
	#define VK_F4 VK_F43174,92278
	#define VK_F5 VK_F53175,92298
	#define VK_F6 VK_F63176,92318
	#define VK_F7 VK_F73177,92338
	#define VK_F8 VK_F83178,92358
	#define VK_F9 VK_F93179,92378
	#define VK_F10 VK_F103180,92398
	#define VK_F11 VK_F113181,92419
	#define VK_F12 VK_F123182,92440
	#define VK_F13 VK_F133183,92461
	#define VK_F14 VK_F143184,92482
	#define VK_F15 VK_F153185,92503
	#define VK_F16 VK_F163186,92524
	#define VK_F17 VK_F173187,92545
	#define VK_F18 VK_F183188,92566
	#define VK_F19 VK_F193189,92587
	#define VK_F20 VK_F203190,92608
	#define VK_F21 VK_F213191,92629
	#define VK_F22 VK_F223192,92650
	#define VK_F23 VK_F233193,92671
	#define VK_F24 VK_F243194,92692
	#define VK_NUMLOCK VK_NUMLOCK3195,92713
	#define VK_SCROLL VK_SCROLL3196,92738
	#define VK_LSHIFT VK_LSHIFT3197,92762
	#define VK_RSHIFT VK_RSHIFT3198,92786
	#define VK_LCONTROL VK_LCONTROL3199,92810
	#define VK_RCONTROL VK_RCONTROL3200,92836
	#define VK_LMENU VK_LMENU3201,92862
	#define VK_RMENU VK_RMENU3202,92885
	#define VK_BROWSER_BACK VK_BROWSER_BACK3203,92908
	#define VK_BROWSER_FORWARD VK_BROWSER_FORWARD3204,92975
	#define VK_BROWSER_REFRESH VK_BROWSER_REFRESH3205,93048
	#define VK_BROWSER_STOP VK_BROWSER_STOP3206,93121
	#define VK_BROWSER_SEARCH VK_BROWSER_SEARCH3207,93188
	#define VK_BROWSER_FAVORITES VK_BROWSER_FAVORITES3208,93259
	#define VK_BROWSER_HOME VK_BROWSER_HOME3209,93336
	#define VK_VOLUME_MUTE VK_VOLUME_MUTE3210,93413
	#define VK_VOLUME_DOWN VK_VOLUME_DOWN3211,93478
	#define VK_VOLUME_UP VK_VOLUME_UP3212,93543
	#define VK_MEDIA_NEXT_TRACK VK_MEDIA_NEXT_TRACK3213,93604
	#define VK_MEDIA_PREV_TRACK VK_MEDIA_PREV_TRACK3214,93673
	#define VK_MEDIA_STOP VK_MEDIA_STOP3215,93746
	#define VK_MEDIA_PLAY_PAUSE VK_MEDIA_PLAY_PAUSE3216,93809
	#define VK_MEDIA_LAUNCH_MAIL VK_MEDIA_LAUNCH_MAIL3217,93884
	#define VK_MEDIA_LAUNCH_MEDIA_SELECT VK_MEDIA_LAUNCH_MEDIA_SELECT3218,93954
	#define VK_MEDIA_LAUNCH_APP1 VK_MEDIA_LAUNCH_APP13219,94034
	#define VK_MEDIA_LAUNCH_APP2 VK_MEDIA_LAUNCH_APP23220,94133
	#define VK_OEM_1 VK_OEM_13221,94232
	#define VK_OEM_PLUS VK_OEM_PLUS3222,94255
	#define VK_OEM_COMMA VK_OEM_COMMA3223,94281
	#define VK_OEM_MINUS VK_OEM_MINUS3224,94308
	#define VK_OEM_PERIOD VK_OEM_PERIOD3225,94335
	#define VK_OEM_2 VK_OEM_23226,94363
	#define VK_OEM_3 VK_OEM_33227,94386
	#define VK_OEM_4 VK_OEM_43228,94409
	#define VK_OEM_5 VK_OEM_53229,94432
	#define VK_OEM_6 VK_OEM_63230,94455
	#define VK_OEM_7 VK_OEM_73231,94478
	#define VK_OEM_8 VK_OEM_83232,94501
	#define VK_OEM_102 VK_OEM_1023233,94524
	#define VK_PROCESSKEY VK_PROCESSKEY3234,94549
	#define VK_PACKET VK_PACKET3235,94577
	#define VK_ATTN VK_ATTN3236,94601
	#define VK_CRSEL VK_CRSEL3237,94635
	#define VK_EXSEL VK_EXSEL3238,94671
	#define VK_EREOF VK_EREOF3239,94707
	#define VK_PLAY VK_PLAY3240,94747
	#define VK_ZOOM VK_ZOOM3241,94781
	#define VK_NONAME VK_NONAME3242,94815
	#define VK_PA1 VK_PA13243,94866
	#define VK_OEM_CLEAR VK_OEM_CLEAR3244,94910
	#define GENERIC_READ GENERIC_READ3249,94975
	#define GENERIC_WRITE GENERIC_WRITE3250,95020
	#define GENERIC_EXECUTE GENERIC_EXECUTE3251,95065
	#define GENERIC_ALL GENERIC_ALL3252,95110
	#define FILE_SHARE_READ FILE_SHARE_READ3253,95155
	#define FILE_SHARE_WRITE FILE_SHARE_WRITE3254,95200
	#define FILE_SHARE_DELETE FILE_SHARE_DELETE3255,95245
	#define CREATE_NEW CREATE_NEW3256,95290
	#define CREATE_ALWAYS CREATE_ALWAYS3257,95326
	#define OPEN_EXISTING OPEN_EXISTING3258,95362
	#define OPEN_ALWAYS OPEN_ALWAYS3259,95398
	#define TRUNCATE_EXISTING TRUNCATE_EXISTING3260,95434
	#define FILE_ATTRIBUTE_READONLY FILE_ATTRIBUTE_READONLY3261,95470
	#define FILE_ATTRIBUTE_NORMAL FILE_ATTRIBUTE_NORMAL3262,95515
	#define FILE_ATTRIBUTE_TEMPORARY FILE_ATTRIBUTE_TEMPORARY3263,95560
	#define ERROR_FILE_NOT_FOUND ERROR_FILE_NOT_FOUND3264,95605
	#define ERROR_ACCESS_DENIED ERROR_ACCESS_DENIED3265,95642
	#define ERROR_NO_MORE_FILES ERROR_NO_MORE_FILES3266,95679
	#define ERROR_FILE_EXISTS ERROR_FILE_EXISTS3267,95717
	#define ERROR_ALREADY_EXISTS ERROR_ALREADY_EXISTS3268,95755
	#define STD_INPUT_HANDLE STD_INPUT_HANDLE3269,95794
	#define STD_OUTPUT_HANDLE STD_OUTPUT_HANDLE3270,95841
	#define STD_ERROR_HANDLE STD_ERROR_HANDLE3271,95888
	#define WM_NULL WM_NULL3304,98431
	#define WM_CREATE WM_CREATE3305,98473
	#define WM_DESTROY WM_DESTROY3306,98515
	#define WM_MOVE WM_MOVE3307,98557
	#define WM_SIZE WM_SIZE3308,98599
	#define WM_ACTIVATE WM_ACTIVATE3309,98641
	#define WM_SETFOCUS WM_SETFOCUS3310,98683
	#define WM_KILLFOCUS WM_KILLFOCUS3311,98725
	#define WM_ENABLE WM_ENABLE3312,98767
	#define WM_SETREDRAW WM_SETREDRAW3313,98809
	#define WM_SETTEXT WM_SETTEXT3314,98851
	#define WM_GETTEXT WM_GETTEXT3315,98893
	#define WM_GETTEXTLENGTH WM_GETTEXTLENGTH3316,98935
	#define WM_PAINT WM_PAINT3317,98977
	#define WM_CLOSE WM_CLOSE3318,99019
	#define WM_QUERYENDSESSION WM_QUERYENDSESSION3319,99061
	#define WM_QUERYOPEN WM_QUERYOPEN3320,99103
	#define WM_ENDSESSION WM_ENDSESSION3321,99145
	#define WM_QUIT WM_QUIT3322,99187
	#define WM_ERASEBKGND WM_ERASEBKGND3323,99229
	#define WM_SYSCOLORCHANGE WM_SYSCOLORCHANGE3324,99271
	#define WM_SHOWWINDOW WM_SHOWWINDOW3325,99313
	#define WM_WININICHANGE WM_WININICHANGE3326,99355
	#define WM_SETTINGCHANGE WM_SETTINGCHANGE3327,99397
	#define WM_DEVMODECHANGE WM_DEVMODECHANGE3328,99448
	#define WM_ACTIVATEAPP WM_ACTIVATEAPP3329,99490
	#define WM_FONTCHANGE WM_FONTCHANGE3330,99532
	#define WM_TIMECHANGE WM_TIMECHANGE3331,99574
	#define WM_CANCELMODE WM_CANCELMODE3332,99616
	#define WM_SETCURSOR WM_SETCURSOR3333,99658
	#define WM_MOUSEACTIVATE WM_MOUSEACTIVATE3334,99700
	#define WM_CHILDACTIVATE WM_CHILDACTIVATE3335,99742
	#define WM_QUEUESYNC WM_QUEUESYNC3336,99784
	#define WM_GETMINMAXINFO WM_GETMINMAXINFO3337,99826
	#define WM_PAINTICON WM_PAINTICON3338,99868
	#define WM_ICONERASEBKGND WM_ICONERASEBKGND3339,99910
	#define WM_NEXTDLGCTL WM_NEXTDLGCTL3340,99952
	#define WM_SPOOLERSTATUS WM_SPOOLERSTATUS3341,99994
	#define WM_DRAWITEM WM_DRAWITEM3342,100036
	#define WM_MEASUREITEM WM_MEASUREITEM3343,100078
	#define WM_DELETEITEM WM_DELETEITEM3344,100120
	#define WM_VKEYTOITEM WM_VKEYTOITEM3345,100162
	#define WM_CHARTOITEM WM_CHARTOITEM3346,100204
	#define WM_SETFONT WM_SETFONT3347,100246
	#define WM_GETFONT WM_GETFONT3348,100288
	#define WM_SETHOTKEY WM_SETHOTKEY3349,100330
	#define WM_GETHOTKEY WM_GETHOTKEY3350,100372
	#define WM_QUERYDRAGICON WM_QUERYDRAGICON3351,100414
	#define WM_COMPAREITEM WM_COMPAREITEM3352,100456
	#define WM_GETOBJECT WM_GETOBJECT3353,100498
	#define WM_COMPACTING WM_COMPACTING3354,100540
	#define WM_COMMNOTIFY WM_COMMNOTIFY3355,100582
	#define WM_WINDOWPOSCHANGING WM_WINDOWPOSCHANGING3356,100650
	#define WM_WINDOWPOSCHANGED WM_WINDOWPOSCHANGED3357,100692
	#define WM_POWER WM_POWER3358,100734
	#define WM_COPYDATA WM_COPYDATA3359,100776
	#define WM_CANCELJOURNAL WM_CANCELJOURNAL3360,100818
	#define WM_NOTIFY WM_NOTIFY3361,100860
	#define WM_INPUTLANGCHANGEREQUEST WM_INPUTLANGCHANGEREQUEST3362,100902
	#define WM_INPUTLANGCHANGE WM_INPUTLANGCHANGE3363,100944
	#define WM_TCARD WM_TCARD3364,100986
	#define WM_HELP WM_HELP3365,101028
	#define WM_USERCHANGED WM_USERCHANGED3366,101070
	#define WM_NOTIFYFORMAT WM_NOTIFYFORMAT3367,101112
	#define WM_CONTEXTMENU WM_CONTEXTMENU3368,101154
	#define WM_STYLECHANGING WM_STYLECHANGING3369,101196
	#define WM_STYLECHANGED WM_STYLECHANGED3370,101238
	#define WM_DISPLAYCHANGE WM_DISPLAYCHANGE3371,101280
	#define WM_GETICON WM_GETICON3372,101322
	#define WM_SETICON WM_SETICON3373,101364
	#define WM_INPUT WM_INPUT3374,101406
	#define WM_KEYFIRST WM_KEYFIRST3375,101448
	#define WM_KEYDOWN WM_KEYDOWN3376,101490
	#define WM_KEYUP WM_KEYUP3377,101532
	#define WM_CHAR WM_CHAR3378,101574
	#define WM_DEADCHAR WM_DEADCHAR3379,101616
	#define WM_SYSKEYDOWN WM_SYSKEYDOWN3380,101658
	#define WM_SYSKEYUP WM_SYSKEYUP3381,101700
	#define WM_SYSCHAR WM_SYSCHAR3382,101742
	#define WM_SYSDEADCHAR WM_SYSDEADCHAR3383,101784
	#define WM_UNICHAR WM_UNICHAR3384,101826
	#define WM_KEYLAST WM_KEYLAST3385,101868
	#define WM_APP WM_APP3386,101910
	#define RID_INPUT RID_INPUT3389,101954
	#define RIM_TYPEMOUSE RIM_TYPEMOUSE3391,101985
	#define RIM_TYPEKEYBOARD RIM_TYPEKEYBOARD3392,102022
	#define RIM_TYPEHID RIM_TYPEHID3393,102059
	#define RI_KEY_MAKE RI_KEY_MAKE3395,102097
	#define RI_KEY_BREAK RI_KEY_BREAK3396,102128
	#define RI_KEY_E0 RI_KEY_E03397,102159
	#define RI_KEY_E1 RI_KEY_E13398,102190
	#define RI_MOUSE_WHEEL RI_MOUSE_WHEEL3399,102221
	#define RIDEV_NOLEGACY RIDEV_NOLEGACY3401,102253
	#define MAPVK_VK_TO_VSC MAPVK_VK_TO_VSC3403,102289
	#define MAPVK_VSC_TO_VK MAPVK_VSC_TO_VK3404,102319
	#define MAPVK_VK_TO_CHAR MAPVK_VK_TO_CHAR3405,102349
	#define MAPVK_VSC_TO_VK_EX MAPVK_VSC_TO_VK_EX3406,102379
	#define CS_DBLCLKS CS_DBLCLKS3413,102727
	#define CS_VREDRAW CS_VREDRAW3414,102756
	#define CS_HREDRAW CS_HREDRAW3415,102785
	#define MB_OK MB_OK3417,102815
	#define MB_ICONSTOP MB_ICONSTOP3418,102851
	#define MB_YESNO MB_YESNO3419,102887
	#define MB_HELP MB_HELP3420,102923
	#define MB_ICONEXCLAMATION MB_ICONEXCLAMATION3421,102959
	#define DM_BITSPERPEL DM_BITSPERPEL3430,103422
	#define DM_PELSWIDTH DM_PELSWIDTH3431,103457
	#define DM_PELSHEIGHT DM_PELSHEIGHT3432,103492
	#define CDS_FULLSCREEN CDS_FULLSCREEN3434,103528
	#define DISP_CHANGE_SUCCESSFUL DISP_CHANGE_SUCCESSFUL3435,103556
	#define IDYES IDYES3436,103590
	#define WS_VISIBLE WS_VISIBLE3438,103608
	#define WS_THICKFRAME WS_THICKFRAME3439,103648
	#define WS_MAXIMIZE WS_MAXIMIZE3440,103688
	#define WS_MAXIMIZEBOX WS_MAXIMIZEBOX3441,103728
	#define WS_MINIMIZE WS_MINIMIZE3442,103768
	#define WS_MINIMIZEBOX WS_MINIMIZEBOX3443,103808
	#define WS_POPUP WS_POPUP3444,103848
	#define WS_OVERLAPPED	WS_OVERLAPPED3445,103888
	#define WS_OVERLAPPEDWINDOW	WS_OVERLAPPEDWINDOW3446,103917
	#define CW_USEDEFAULT CW_USEDEFAULT3447,103955
	#define WS_BORDER WS_BORDER3448,103995
	#define WS_CAPTION WS_CAPTION3449,104033
	#define WS_SYSMENU WS_SYSMENU3450,104071
	#define HWND_NOTOPMOST HWND_NOTOPMOST3452,104109
	#define HWND_TOPMOST HWND_TOPMOST3453,104144
	#define HWND_TOP HWND_TOP3454,104179
	#define HWND_BOTTOM HWND_BOTTOM3455,104214
	#define SWP_NOSIZE SWP_NOSIZE3456,104249
	#define SWP_NOMOVE SWP_NOMOVE3457,104285
	#define SWP_NOZORDER SWP_NOZORDER3458,104321
	#define SWP_NOREDRAW SWP_NOREDRAW3459,104357
	#define SWP_NOACTIVATE SWP_NOACTIVATE3460,104393
	#define SWP_FRAMECHANGED SWP_FRAMECHANGED3461,104429
	#define SWP_SHOWWINDOW SWP_SHOWWINDOW3462,104465
	#define SWP_HIDEWINDOW SWP_HIDEWINDOW3463,104501
	#define SWP_NOCOPYBITS SWP_NOCOPYBITS3464,104537
	#define SWP_NOOWNERZORDER SWP_NOOWNERZORDER3465,104573
	#define SWP_NOSENDCHANGING SWP_NOSENDCHANGING3466,104609
	#define SW_HIDE SW_HIDE3468,104646
	#define SW_SHOWNORMAL SW_SHOWNORMAL3469,104677
	#define SW_NORMAL SW_NORMAL3470,104708
	#define SW_SHOWMINIMIZED SW_SHOWMINIMIZED3471,104739
	#define SW_SHOWMAXIMIZED SW_SHOWMAXIMIZED3472,104770
	#define SW_MAXIMIZE SW_MAXIMIZE3473,104801
	#define SW_SHOWNOACTIVATE SW_SHOWNOACTIVATE3474,104832
	#define SW_SHOW SW_SHOW3475,104863
	#define SW_MINIMIZE SW_MINIMIZE3476,104894
	#define SW_SHOWMINNOACTIVE SW_SHOWMINNOACTIVE3477,104925
	#define SW_SHOWNA SW_SHOWNA3478,104956
	#define SW_RESTORE SW_RESTORE3479,104987
	#define SW_SHOWDEFAULT SW_SHOWDEFAULT3480,105018
	#define SW_FORCEMINIMIZE SW_FORCEMINIMIZE3481,105050
	#define SW_MAX SW_MAX3482,105082
	#define ENUM_CURRENT_SETTINGS ENUM_CURRENT_SETTINGS3484,105115
	#define ENUM_REGISTRY_SETTINGS ENUM_REGISTRY_SETTINGS3485,105161
	#define PFD_TYPE_RGBA PFD_TYPE_RGBA3514,107185
	#define PFD_TYPE_COLORINDEX PFD_TYPE_COLORINDEX3515,107222
	#define PFD_MAIN_PLANE PFD_MAIN_PLANE3516,107259
	#define PFD_OVERLAY_PLANE PFD_OVERLAY_PLANE3517,107296
	#define PFD_UNDERLAY_PLANE PFD_UNDERLAY_PLANE3518,107333
	#define PFD_DOUBLEBUFFER PFD_DOUBLEBUFFER3519,107373
	#define PFD_STEREO PFD_STEREO3520,107410
	#define PFD_DRAW_TO_WINDOW PFD_DRAW_TO_WINDOW3521,107447
	#define PFD_DRAW_TO_BITMAP PFD_DRAW_TO_BITMAP3522,107484
	#define PFD_SUPPORT_GDI PFD_SUPPORT_GDI3523,107521
	#define PFD_SUPPORT_OPENGL PFD_SUPPORT_OPENGL3524,107559
	#define PFD_GENERIC_FORMAT PFD_GENERIC_FORMAT3525,107597
	#define PFD_NEED_PALETTE PFD_NEED_PALETTE3526,107635
	#define PFD_NEED_SYSTEM_PALETTE PFD_NEED_SYSTEM_PALETTE3527,107674
	#define PFD_SWAP_EXCHANGE PFD_SWAP_EXCHANGE3528,107720
	#define PFD_SWAP_COPY PFD_SWAP_COPY3529,107766
	#define PFD_SWAP_LAYER_BUFFERS PFD_SWAP_LAYER_BUFFERS3530,107812
	#define PFD_GENERIC_ACCELERATED PFD_GENERIC_ACCELERATED3531,107858
	#define PFD_DEPTH_DONTCARE PFD_DEPTH_DONTCARE3532,107904
	#define PFD_DOUBLEBUFFER_DONTCARE PFD_DOUBLEBUFFER_DONTCARE3533,107950
	#define PFD_STEREO_DONTCARE PFD_STEREO_DONTCARE3534,107996
	#define GWLP_USERDATA GWLP_USERDATA3536,108043
	#define GWL_ID GWL_ID3538,108071
	#define GWL_STYLE GWL_STYLE3539,108094
	#define PM_NOREMOVE PM_NOREMOVE3567,109590
	#define PM_REMOVE PM_REMOVE3568,109613
	{__anona24233aa18033575,109909
		DIB_RGB_COLORS  = 0x00,DIB_RGB_COLORS3576,109912
		DIB_PAL_COLORS  = 0x01,DIB_PAL_COLORS3577,109938
		DIB_PAL_INDICES = 0x02DIB_PAL_INDICES3578,109964
	} DIBColors;DIBColors3579,109989
	#define SRCCOPY SRCCOPY3581,110004
	#define SRCPAINT SRCPAINT3582,110041
	#define SRCAND SRCAND3583,110078
	#define SRCINVERT SRCINVERT3584,110115
	#define SRCERASE SRCERASE3585,110152
	#define NOTSRCCOPY NOTSRCCOPY3586,110189
	#define NOTSRCERASE NOTSRCERASE3587,110226
	#define MERGECOPY MERGECOPY3588,110263
	#define MERGEPAINT MERGEPAINT3589,110300
	#define PATCOPY PATCOPY3590,110337
	#define PATPAINT PATPAINT3591,110374
	#define PATINVERT PATINVERT3592,110411
	#define DSTINVERT DSTINVERT3593,110448
	#define BLACKNESS BLACKNESS3594,110485
	#define WHITENESS WHITENESS3595,110522
void gb_assert_handler(char const *prefix, char const *condition, char const *file, i32 line, chgb_assert_handler3619,111423
b32 gb_is_power_of_two(isize x) {gb_is_power_of_two3632,111764
gb_inline void *gb_align_forward(void *ptr, isize alignment) {gb_align_forward3638,111852
gb_inline void *      gb_pointer_add      (void *ptr, isize bytes)             { return cast(voigb_pointer_add3649,112060
gb_inline void *      gb_pointer_sub      (void *ptr, isize bytes)             { return cast(voigb_pointer_sub3650,112187
gb_inline void const *gb_pointer_add_const(void const *ptr, isize bytes)       { return cast(voigb_pointer_add_const3651,112314
gb_inline void const *gb_pointer_sub_const(void const *ptr, isize bytes)       { return cast(voigb_pointer_sub_const3652,112453
gb_inline isize       gb_pointer_diff     (void const *begin, void const *end) { return cast(isigb_pointer_diff3653,112592
gb_inline void gb_zero_size(void *ptr, isize size) { gb_memset(ptr, 0, size); }gb_zero_size3655,112741
gb_inline void *gb_memcopy(void *dest, void const *source, isize n) {gb_memcopy3662,112880
gb_inline void *gb_memmove(void *dest, void const *source, isize n) {gb_memmove3822,116593
gb_inline void *gb_memset(void *dest, u8 c, isize n) {gb_memset3869,117654
gb_inline i32 gb_memcompare(void const *s1, void const *s2, isize size) {gb_memcompare3938,118811
void gb_memswap(void *i, void *j, isize size) {gb_memswap3956,119152
#define GB__ONES GB__ONES3989,119913
#define GB__HIGHS GB__HIGHS3990,119960
#define GB__HAS_ZERO(GB__HAS_ZERO3991,120010
void const *gb_memchr(void const *data, u8 c, isize n) {gb_memchr3994,120070
void const *gb_memrchr(void const *data, u8 c, isize n) {gb_memrchr4020,120563
gb_inline void *gb_alloc_align (gbAllocator a, isize size, isize alignment)                     gb_alloc_align4031,120749
gb_inline void *gb_alloc       (gbAllocator a, isize size)                                      gb_alloc4032,120957
gb_inline void  gb_free        (gbAllocator a, void *ptr)                                       gb_free4033,121129
gb_inline void  gb_free_all    (gbAllocator a)                                                  gb_free_all4034,121334
gb_inline void *gb_resize      (gbAllocator a, void *ptr, isize old_size, isize new_size)       gb_resize4035,121526
gb_inline void *gb_resize_align(gbAllocator a, void *ptr, isize old_size, isize new_size, isize gb_resize_align4036,121718
gb_inline void *gb_alloc_copy      (gbAllocator a, void const *src, isize size) {gb_alloc_copy4038,121938
gb_inline void *gb_alloc_copy_align(gbAllocator a, void const *src, isize size, isize alignment)gb_alloc_copy_align4041,122072
gb_inline char *gb_alloc_str(gbAllocator a, char const *str) {gb_alloc_str4045,122241
gb_inline char *gb_alloc_str_len(gbAllocator a, char const *str, isize len) {gb_alloc_str_len4049,122357
gb_inline void *gb_default_resize_align(gbAllocator a, void *old_memory, isize old_size, isize ngb_default_resize_align4057,122543
gb_inline i32  gb_atomic32_load (gbAtomic32 const volatile *a)      { return a->value;  }gb_atomic32_load4090,123341
gb_inline void gb_atomic32_store(gbAtomic32 volatile *a, i32 value) { a->value = value; }gb_atomic32_store4091,123431
gb_inline i32 gb_atomic32_compare_exchange(gbAtomic32 volatile *a, i32 expected, i32 desired) {gb_atomic32_compare_exchange4093,123522
gb_inline i32 gb_atomic32_exchanged(gbAtomic32 volatile *a, i32 desired) {gb_atomic32_exchanged4096,123700
gb_inline i32 gb_atomic32_fetch_add(gbAtomic32 volatile *a, i32 operand) {gb_atomic32_fetch_add4099,123840
gb_inline i32 gb_atomic32_fetch_and(gbAtomic32 volatile *a, i32 operand) {gb_atomic32_fetch_and4102,123983
gb_inline i32 gb_atomic32_fetch_or(gbAtomic32 volatile *a, i32 operand) {gb_atomic32_fetch_or4105,124118
gb_inline i64 gb_atomic64_load(gbAtomic64 const volatile *a) {gb_atomic64_load4109,124252
gb_inline void gb_atomic64_store(gbAtomic64 volatile *a, i64 value) {gb_atomic64_store4129,124700
gb_inline i64 gb_atomic64_compare_exchange(gbAtomic64 volatile *a, i64 expected, i64 desired) {gb_atomic64_compare_exchange4147,125110
gb_inline i64 gb_atomic64_exchanged(gbAtomic64 volatile *a, i64 desired) {gb_atomic64_exchanged4151,125290
gb_inline i64 gb_atomic64_fetch_add(gbAtomic64 volatile *a, i64 operand) {gb_atomic64_fetch_add4167,125732
gb_inline i64 gb_atomic64_fetch_and(gbAtomic64 volatile *a, i64 operand) {gb_atomic64_fetch_and4183,126188
gb_inline i64 gb_atomic64_fetch_or(gbAtomic64 volatile *a, i64 operand) {gb_atomic64_fetch_or4199,126636
gb_inline i32  gb_atomic32_load (gbAtomic32 const volatile *a)      { return a->value;  }gb_atomic32_load4219,127111
gb_inline void gb_atomic32_store(gbAtomic32 volatile *a, i32 value) { a->value = value; }gb_atomic32_store4220,127201
gb_inline i32 gb_atomic32_compare_exchange(gbAtomic32 volatile *a, i32 expected, i32 desired) {gb_atomic32_compare_exchange4222,127292
gb_inline i32 gb_atomic32_exchanged(gbAtomic32 volatile *a, i32 desired) {gb_atomic32_exchanged4232,127540
gb_inline i32 gb_atomic32_fetch_add(gbAtomic32 volatile *a, i32 operand) {gb_atomic32_fetch_add4243,127797
gb_inline i32 gb_atomic32_fetch_and(gbAtomic32 volatile *a, i32 operand) {gb_atomic32_fetch_and4253,128006
gb_inline i32 gb_atomic32_fetch_or(gbAtomic32 volatile *a, i32 operand) {gb_atomic32_fetch_or4268,128356
gb_inline i64 gb_atomic64_load(gbAtomic64 const volatile *a) {gb_atomic64_load4284,128708
gb_inline void gb_atomic64_store(gbAtomic64 volatile *a, i64 value) {gb_atomic64_store4300,128998
gb_inline i64 gb_atomic64_compare_exchange(gbAtomic64 volatile *a, i64 expected, i64 desired) {gb_atomic64_compare_exchange4314,129301
gb_inline i64 gb_atomic64_exchanged(gbAtomic64 volatile *a, i64 desired) {gb_atomic64_exchanged4334,129768
gb_inline i64 gb_atomic64_fetch_add(gbAtomic64 volatile *a, i64 operand) {gb_atomic64_fetch_add4354,130193
gb_inline i64 gb_atomic64_fetch_and(gbAtomic64 volatile *a, i64 operand) {gb_atomic64_fetch_and4372,130586
gb_inline i64 gb_atomic64_fetch_or(gbAtomic64 volatile *a, i64 operand) {gb_atomic64_fetch_or4395,131120
gb_inline b32 gb_atomic32_spin_lock(gbAtomic32 volatile *a, isize time_out) {gb_atomic32_spin_lock4422,131719
gb_inline void gb_atomic32_spin_unlock(gbAtomic32 volatile *a) {gb_atomic32_spin_unlock4432,132057
gb_inline b32 gb_atomic64_spin_lock(gbAtomic64 volatile *a, isize time_out) {gb_atomic64_spin_lock4437,132165
gb_inline void gb_atomic64_spin_unlock(gbAtomic64 volatile *a) {gb_atomic64_spin_unlock4448,132504
gb_inline b32 gb_atomic32_try_acquire_lock(gbAtomic32 volatile *a) {gb_atomic32_try_acquire_lock4453,132612
gb_inline b32 gb_atomic64_try_acquire_lock(gbAtomic64 volatile *a) {gb_atomic64_try_acquire_lock4461,132810
gb_inline void *gb_atomic_ptr_load(gbAtomicPtr const volatile *a) {gb_atomic_ptr_load4473,133039
gb_inline void gb_atomic_ptr_store(gbAtomicPtr volatile *a, void *value) {gb_atomic_ptr_store4476,133195
gb_inline void *gb_atomic_ptr_compare_exchange(gbAtomicPtr volatile *a, void *expected, void *degb_atomic_ptr_compare_exchange4479,133350
gb_inline void *gb_atomic_ptr_exchanged(gbAtomicPtr volatile *a, void *desired) {gb_atomic_ptr_exchanged4482,133610
gb_inline void *gb_atomic_ptr_fetch_add(gbAtomicPtr volatile *a, void *operand) {gb_atomic_ptr_fetch_add4485,133809
gb_inline void *gb_atomic_ptr_fetch_and(gbAtomicPtr volatile *a, void *operand) {gb_atomic_ptr_fetch_and4488,134008
gb_inline void *gb_atomic_ptr_fetch_or(gbAtomicPtr volatile *a, void *operand) {gb_atomic_ptr_fetch_or4491,134207
gb_inline b32 gb_atomic_ptr_spin_lock(gbAtomicPtr volatile *a, isize time_out) {gb_atomic_ptr_spin_lock4494,134404
gb_inline void gb_atomic_ptr_spin_unlock(gbAtomicPtr volatile *a) {gb_atomic_ptr_spin_unlock4497,134558
gb_inline b32 gb_atomic_ptr_try_acquire_lock(gbAtomicPtr volatile *a) {gb_atomic_ptr_try_acquire_lock4500,134684
gb_inline void *gb_atomic_ptr_load(gbAtomicPtr const volatile *a) {gb_atomic_ptr_load4506,134858
gb_inline void gb_atomic_ptr_store(gbAtomicPtr volatile *a, void *value) {gb_atomic_ptr_store4509,135014
gb_inline void *gb_atomic_ptr_compare_exchange(gbAtomicPtr volatile *a, void *expected, void *degb_atomic_ptr_compare_exchange4512,135169
gb_inline void *gb_atomic_ptr_exchanged(gbAtomicPtr volatile *a, void *desired) {gb_atomic_ptr_exchanged4515,135429
gb_inline void *gb_atomic_ptr_fetch_add(gbAtomicPtr volatile *a, void *operand) {gb_atomic_ptr_fetch_add4518,135628
gb_inline void *gb_atomic_ptr_fetch_and(gbAtomicPtr volatile *a, void *operand) {gb_atomic_ptr_fetch_and4521,135827
gb_inline void *gb_atomic_ptr_fetch_or(gbAtomicPtr volatile *a, void *operand) {gb_atomic_ptr_fetch_or4524,136026
gb_inline b32 gb_atomic_ptr_spin_lock(gbAtomicPtr volatile *a, isize time_out) {gb_atomic_ptr_spin_lock4527,136223
gb_inline void gb_atomic_ptr_spin_unlock(gbAtomicPtr volatile *a) {gb_atomic_ptr_spin_unlock4530,136377
gb_inline b32 gb_atomic_ptr_try_acquire_lock(gbAtomicPtr volatile *a) {gb_atomic_ptr_try_acquire_lock4533,136503
gb_inline void gb_yield_thread(void) {gb_yield_thread4539,136654
gb_inline void gb_mfence(void) {gb_mfence4551,136890
gb_inline void gb_sfence(void) {gb_sfence4563,137113
gb_inline void gb_lfence(void) {gb_lfence4575,137348
gb_inline void gb_semaphore_release(gbSemaphore *s) { gb_semaphore_post(s, 1); }gb_semaphore_release4588,137583
	gb_inline void gb_semaphore_init   (gbSemaphore *s)            { s->win32_handle = CreateSemaphgb_semaphore_init4591,137696
	gb_inline void gb_semaphore_destroy(gbSemaphore *s)            { CloseHandle(s->win32_handle); gb_semaphore_destroy4592,137824
	gb_inline void gb_semaphore_post   (gbSemaphore *s, i32 count) { ReleaseSemaphore(s->win32_handgb_semaphore_post4593,137922
	gb_inline void gb_semaphore_wait   (gbSemaphore *s)            { WaitForSingleObject(s->win32_hgb_semaphore_wait4594,138038
	gb_inline void gb_semaphore_init   (gbSemaphore *s)            { semaphore_create(mach_task_selgb_semaphore_init4597,138184
	gb_inline void gb_semaphore_destroy(gbSemaphore *s)            { semaphore_destroy(mach_task_segb_semaphore_destroy4598,138325
	gb_inline void gb_semaphore_post   (gbSemaphore *s, i32 count) { while (count --> 0) semaphore_gb_semaphore_post4599,138445
	gb_inline void gb_semaphore_wait   (gbSemaphore *s)            { semaphore_wait(s->osx_handle);gb_semaphore_wait4600,138566
	gb_inline void gb_semaphore_init   (gbSemaphore *s)            { sem_init(&s->unix_handle, 0, 0gb_semaphore_init4603,138696
	gb_inline void gb_semaphore_destroy(gbSemaphore *s)            { sem_destroy(&s->unix_handle); gb_semaphore_destroy4604,138797
	gb_inline void gb_semaphore_post   (gbSemaphore *s, i32 count) { while (count --> 0) sem_post(&gb_semaphore_post4605,138895
	gb_inline void gb_semaphore_wait   (gbSemaphore *s)            { int i; do { i = sem_wait(&s->ugb_semaphore_wait4606,139010
gb_inline void gb_mutex_init(gbMutex *m) {gb_mutex_init4612,139180
gb_inline void gb_mutex_destroy(gbMutex *m) {gb_mutex_destroy4622,139513
gb_inline void gb_mutex_lock(gbMutex *m) {gb_mutex_lock4630,139701
gb_inline b32 gb_mutex_try_lock(gbMutex *m) {gb_mutex_try_lock4638,139882
gb_inline void gb_mutex_unlock(gbMutex *m) {gb_mutex_unlock4646,140096
void gb_thread_init(gbThread *t) {gb_thread_init4660,140287
void gb_thread_destroy(gbThread *t) {gb_thread_destroy4670,140485
gb_inline void gb__thread_run(gbThread *t) {gb__thread_run4676,140604
	gb_inline DWORD __stdcall gb__thread_proc(void *arg) {gb__thread_proc4682,140752
	gb_inline void *          gb__thread_proc(void *arg) {gb__thread_proc4689,140912
gb_inline void gb_thread_start(gbThread *t, gbThreadProc *proc, void *user_data) { gb_thread_stagb_thread_start4697,141077
gb_inline void gb_thread_start_with_stack(gbThread *t, gbThreadProc *proc, void *user_data, isizgb_thread_start_with_stack4699,141214
gb_inline void gb_thread_join(gbThread *t) {gb_thread_join4726,142003
gb_inline b32 gb_thread_is_running(gbThread const *t) { return t->is_running != 0; }gb_thread_is_running4740,142330
gb_inline u32 gb_thread_current_id(void) {gb_thread_current_id4742,142416
void gb_thread_set_name(gbThread *t, char const *name) {gb_thread_set_name4768,143172
		typedef struct {__anona24233aa19084771,143282
			DWORD       type;type4772,143301
			char const *name;name4773,143322
			DWORD       id;id4774,143343
			DWORD       flags;flags4775,143362
		} gbprivThreadName;gbprivThreadName4776,143384
void gb_sync_init(gbSync *s) {gb_sync_init4804,144025
void gb_sync_destroy(gbSync *s) {gb_sync_destroy4811,144164
void gb_sync_set_target(gbSync *s, i32 count) {gb_sync_set_target4820,144372
void gb_sync_release(gbSync *s) {gb_sync_release4831,144589
i32 gb_sync_reach(gbSync *s) {gb_sync_reach4840,144742
void gb_sync_reach_and_wait(gbSync *s) {gb_sync_reach_and_wait4851,145046
gb_inline gbAllocator gb_heap_allocator(void) {gb_heap_allocator4878,145756
GB_ALLOCATOR_PROC(gb_heap_allocator_proc) {GB_ALLOCATOR_PROC4885,145884
void gb_affinity_init(gbAffinity *a) {gb_affinity_init4951,147366
void gb_affinity_destroy(gbAffinity *a) {gb_affinity_destroy5000,149021
b32 gb_affinity_set(gbAffinity *a, isize core, isize thread) {gb_affinity_set5005,149082
isize gb_affinity_thread_count_for_core(gbAffinity *a, isize core) {gb_affinity_thread_count_for_core5021,149535
void gb_affinity_init(gbAffinity *a) {gb_affinity_init5027,149731
void gb_affinity_destroy(gbAffinity *a) {gb_affinity_destroy5055,150386
b32 gb_affinity_set(gbAffinity *a, isize core, isize thread_index) {gb_affinity_set5059,150446
isize gb_affinity_thread_count_for_core(gbAffinity *a, isize core) {gb_affinity_thread_count_for_core5075,150970
void gb_affinity_init(gbAffinity *a) {gb_affinity_init5085,151337
#define AF__CHECK(AF__CHECK5111,152018
void gb_affinity_destroy(gbAffinity *a) {gb_affinity_destroy5151,152825
b32 gb_affinity_set(gbAffinity *a, isize core, isize thread_index) {gb_affinity_set5155,152885
isize gb_affinity_thread_count_for_core(gbAffinity *a, isize core) {gb_affinity_thread_count_for_core5159,152971
gbVirtualMemory gb_virtual_memory(void *data, isize size) {gb_virtual_memory5181,153267
gb_inline gbVirtualMemory gb_vm_alloc(void *addr, isize size) {gb_vm_alloc5190,153429
gb_inline b32 gb_vm_free(gbVirtualMemory vm) {gb_vm_free5198,153647
gb_inline gbVirtualMemory gb_vm_trim(gbVirtualMemory vm, isize lead_size, isize size) {gb_vm_trim5216,154167
gb_inline b32 gb_vm_purge(gbVirtualMemory vm) {gb_vm_purge5232,154536
isize gb_virtual_memory_page_size(isize *alignment_out) {gb_virtual_memory_page_size5238,154699
#define MAP_ANONYMOUS MAP_ANONYMOUS5248,154923
gb_inline gbVirtualMemory gb_vm_alloc(void *addr, isize size) {gb_vm_alloc5251,154962
gb_inline b32 gb_vm_free(gbVirtualMemory vm) {gb_vm_free5259,155190
gb_inline gbVirtualMemory gb_vm_trim(gbVirtualMemory vm, isize lead_size, isize size) {gb_vm_trim5264,155281
gb_inline b32 gb_vm_purge(gbVirtualMemory vm) {gb_vm_purge5280,155716
isize gb_virtual_memory_page_size(isize *alignment_out) {gb_virtual_memory_page_size5285,155838
gb_inline void gb_arena_init_from_memory(gbArena *arena, void *start, isize size) {gb_arena_init_from_memory5308,156182
gb_inline void gb_arena_init_from_allocator(gbArena *arena, gbAllocator backing, isize size) {gb_arena_init_from_allocator5317,156456
gb_inline void gb_arena_init_sub(gbArena *arena, gbArena *parent_arena, isize size) { gb_arena_igb_arena_init_sub5325,156768
gb_inline void gb_arena_free(gbArena *arena) {gb_arena_free5328,156935
gb_inline isize gb_arena_alignment_of(gbArena *arena, isize alignment) {gb_arena_alignment_of5336,157099
gb_inline isize gb_arena_size_remaining(gbArena *arena, isize alignment) {gb_arena_size_remaining5349,157502
gb_inline void gb_arena_check(gbArena *arena) { GB_ASSERT(arena->temp_count == 0); }gb_arena_check5354,157700
gb_inline gbAllocator gb_arena_allocator(gbArena *arena) {gb_arena_allocator5361,157791
GB_ALLOCATOR_PROC(gb_arena_allocator_proc) {GB_ALLOCATOR_PROC5368,157964
gb_inline gbTempArenaMemory gb_temp_arena_memory_begin(gbArena *arena) {gb_temp_arena_memory_begin5410,159034
gb_inline void gb_temp_arena_memory_end(gbTempArenaMemory tmp) {gb_temp_arena_memory_end5418,159235
gb_inline void gb_pool_init(gbPool *pool, gbAllocator backing, isize num_blocks, isize block_sizgb_pool_init5434,159590
void gb_pool_init_align(gbPool *pool, gbAllocator backing, isize num_blocks, isize block_size, igb_pool_init_align5438,159783
gb_inline void gb_pool_free(gbPool *pool) {gb_pool_free5469,160635
gb_inline gbAllocator gb_pool_allocator(gbPool *pool) {gb_pool_allocator5476,160761
GB_ALLOCATOR_PROC(gb_pool_allocator_proc) {GB_ALLOCATOR_PROC5482,160928
gb_inline gbAllocationHeader *gb_allocation_header(void *data) {gb_allocation_header5530,161950
gb_inline void gb_allocation_header_fill(gbAllocationHeader *header, void *data, isize size) {gb_allocation_header_fill5538,162136
gb_inline void gb_free_list_init(gbFreeList *fl, void *start, isize size) {gb_free_list_init5553,162400
gb_inline void gb_free_list_init_from_allocator(gbFreeList *fl, gbAllocator backing, isize size)gb_free_list_init_from_allocator5564,162704
gb_inline gbAllocator gb_free_list_allocator(gbFreeList *fl) {gb_free_list_allocator5571,162885
GB_ALLOCATOR_PROC(gb_free_list_allocator_proc) {GB_ALLOCATOR_PROC5578,163031
void gb_scratch_memory_init(gbScratchMemory *s, void *start, isize size) {gb_scratch_memory_init5699,166167
b32 gb_scratch_memory_is_in_use(gbScratchMemory *s, void *ptr) {gb_scratch_memory_is_in_use5707,166357
gbAllocator gb_scratch_allocator(gbScratchMemory *s) {gb_scratch_allocator5715,166624
GB_ALLOCATOR_PROC(gb_scratch_allocator_proc) {GB_ALLOCATOR_PROC5722,166759
#define GB__COMPARE_PROC(GB__COMPARE_PROC5807,168957
gb_global isize gb__str_cmp_offset; GB_COMPARE_PROC(gb__str_cmp) {gb__str_cmp_offset5828,169650
gb_global isize gb__str_cmp_offset; GB_COMPARE_PROC(gb__str_cmp) {GB_COMPARE_PROC5828,169650
GB_COMPARE_PROC_PTR(gb_str_cmp(isize offset)) {GB_COMPARE_PROC_PTR5833,169904
#define GB__SORT_STACK_SIZE GB__SORT_STACK_SIZE5844,170071
#define GB__SORT_INSERT_SORT_THRESHOLD GB__SORT_INSERT_SORT_THRESHOLD5845,170113
#define GB__SORT_PUSH(GB__SORT_PUSH5847,170156
#define GB__SORT_POP(GB__SORT_POP5854,170288
void gb_sort(void *base_, isize count, isize size, gbCompareProc cmp) {gb_sort5862,170421
#define GB_RADIX_SORT_PROC_GEN(GB_RADIX_SORT_PROC_GEN5920,171769
gb_inline isize gb_binary_search(void const *base, isize count, isize size, void const *key, gbCgb_binary_search5954,172881
void gb_shuffle(void *base, isize count, isize size) {gb_shuffle5972,173280
void gb_reverse(void *base, isize count, isize size) {gb_reverse5985,173578
gb_inline char gb_char_to_lower(char c) {gb_char_to_lower6003,173859
gb_inline char gb_char_to_upper(char c) {gb_char_to_upper6009,173968
gb_inline b32 gb_char_is_space(char c) {gb_char_is_space6015,174077
gb_inline b32 gb_char_is_digit(char c) {gb_char_is_digit6026,174260
gb_inline b32 gb_char_is_hex_digit(char c) {gb_char_is_hex_digit6032,174361
gb_inline b32 gb_char_is_alpha(char c) {gb_char_is_alpha6040,174530
gb_inline b32 gb_char_is_alphanumeric(char c) {gb_char_is_alphanumeric6047,174667
gb_inline i32 gb_digit_to_int(char c) {gb_digit_to_int6051,174770
gb_inline i32 gb_hex_digit_to_int(char c) {gb_hex_digit_to_int6055,174862
gb_inline void gb_str_to_lower(char *str) {gb_str_to_lower6068,175101
gb_inline void gb_str_to_upper(char *str) {gb_str_to_upper6076,175228
gb_inline isize gb_strlen(char const *str) {gb_strlen6085,175356
gb_inline isize gb_strnlen(char const *str, isize max_len) {gb_strnlen6107,175720
gb_inline isize gb_utf8_strlen(u8 const *str) {gb_utf8_strlen6115,175901
gb_inline isize gb_utf8_strnlen(u8 const *str, isize max_len) {gb_utf8_strnlen6131,176238
gb_inline i32 gb_strcmp(char const *s1, char const *s2) {gb_strcmp6149,176625
gb_inline char *gb_strcpy(char *dest, char const *source) {gb_strcpy6156,176765
gb_inline char *gb_strncpy(char *dest, char const *source, isize len) {gb_strncpy6166,176946
gb_inline isize gb_strlcpy(char *dest, char const *source, isize len) {gb_strlcpy6182,177220
gb_inline char *gb_strrev(char *str) {gb_strrev6202,177587
gb_inline i32 gb_strncmp(char const *s1, char const *s2, isize len) {gb_strncmp6217,177786
gb_inline char const *gb_strtok(char *output, char const *src, char const *delimit) {gb_strtok6230,178016
gb_inline b32 gb_str_has_prefix(char const *str, char const *prefix) {gb_str_has_prefix6239,178239
gb_inline b32 gb_str_has_suffix(char const *str, char const *suffix) {gb_str_has_suffix6248,178399
gb_inline char const *gb_char_first_occurence(char const *s, char c) {gb_char_first_occurence6260,178608
gb_inline char const *gb_char_last_occurence(char const *s, char c) {gb_char_last_occurence6271,178776
gb_inline void gb_str_concat(char *dest, isize dest_len,gb_str_concat6284,178955
gb_internal isize gb__scan_i64(char const *text, i32 base, i64 *value) {gb__scan_i646296,179333
gb_internal isize gb__scan_u64(char const *text, i32 base, u64 *value) {gb__scan_u646333,179946
u64 gb_str_to_u64(char const *str, char **end_ptr, i32 base) {gb_str_to_u646362,180468
i64 gb_str_to_i64(char const *str, char **end_ptr, i32 base) {gb_str_to_i646379,180788
gb_global char const gb__num_to_char_table[] =gb__num_to_char_table6397,181157
gb_inline void gb_i64_to_str(i64 value, char *string, i32 base) {gb_i64_to_str6403,181286
gb_inline void gb_u64_to_str(u64 value, char *string, i32 base) {gb_u64_to_str6429,181683
gb_inline f32 gb_str_to_f32(char const *str, char **end_ptr) {gb_str_to_f326445,181945
gb_inline f64 gb_str_to_f64(char const *str, char **end_ptr) {gb_str_to_f646451,182081
gb_inline void gb__set_string_length  (gbString str, isize len) { GB_STRING_HEADER(str)->length gb__set_string_length6517,183148
gb_inline void gb__set_string_capacity(gbString str, isize cap) { GB_STRING_HEADER(str)->capacitgb__set_string_capacity6518,183253
gbString gb_string_make_reserve(gbAllocator a, isize capacity) {gb_string_make_reserve6521,183362
gb_inline gbString gb_string_make(gbAllocator a, char const *str) {gb_string_make6542,183843
gbString gb_string_make_length(gbAllocator a, void const *init_str, isize num_bytes) {gb_string_make_length6547,183997
gb_inline void gb_string_free(gbString str) {gb_string_free6570,184599
gb_inline gbString gb_string_duplicate(gbAllocator a, gbString const str) { return gb_string_makgb_string_duplicate6578,184752
gb_inline isize gb_string_length  (gbString const str) { return GB_STRING_HEADER(str)->length; }gb_string_length6580,184892
gb_inline isize gb_string_capacity(gbString const str) { return GB_STRING_HEADER(str)->capacity;gb_string_capacity6581,184989
gb_inline isize gb_string_available_space(gbString const str) {gb_string_available_space6583,185089
gb_inline void gb_string_clear(gbString str) { gb__set_string_length(str, 0); str[0] = '\0'; }gb_string_clear6592,185281
gb_inline gbString gb_string_append(gbString str, gbString const other) { return gb_string_appengb_string_append6594,185377
gbString gb_string_append_length(gbString str, void const *other, isize other_len) {gb_string_append_length6596,185523
gb_inline gbString gb_string_appendc(gbString str, char const *other) {gb_string_appendc6612,185920
gbString gb_string_append_rune(gbString str, Rune r) {gb_string_append_rune6616,186058
gbString gb_string_append_fmt(gbString str, char const *fmt, ...) {gb_string_append_fmt6625,186258
gbString gb_string_set(gbString str, char const *cstr) {gb_string_set6637,186519
gbString gb_string_make_space_for(gbString str, isize add_len) {gb_string_make_space_for6655,186857
gb_inline isize gb_string_allocation_size(gbString const str) {gb_string_allocation_size6685,187672
gb_inline b32 gb_string_are_equal(gbString const lhs, gbString const rhs) {gb_string_are_equal6691,187820
gbString gb_string_trim(gbString str, char const *cut_set) {gb_string_trim6709,188141
gb_inline gbString gb_string_trim_space(gbString str) { return gb_string_trim(str, " \t\r\n\v\f"gb_string_trim_space6734,188730
u16 *gb_utf8_to_ucs2(u16 *buffer, isize len, u8 const *str) {gb_utf8_to_ucs26746,188937
u8 *gb_ucs2_to_utf8(u8 *buffer, isize len, u16 const *str) {gb_ucs2_to_utf86810,190597
u16 *gb_utf8_to_ucs2_buf(u8 const *str) { // NOTE(bill): Uses locally persisting buffergb_utf8_to_ucs2_buf6849,191648
u8 *gb_ucs2_to_utf8_buf(u16 const *str) { // NOTE(bill): Uses locally persisting buffergb_ucs2_to_utf8_buf6854,191825
gb_global u8 const gb__utf8_first[256] = {gb__utf8_first6861,192003
typedef struct gbUtf8AcceptRange {gbUtf8AcceptRange6881,193811
	u8 lo, hi;lo6882,193846
	u8 lo, hi;hi6882,193846
} gbUtf8AcceptRange;gbUtf8AcceptRange6883,193858
gb_global gbUtf8AcceptRange const gb__utf8_accept_ranges[] = {gb__utf8_accept_ranges6885,193880
isize gb_utf8_decode(u8 const *str, isize str_len, Rune *codepoint_out) {gb_utf8_decode6894,194023
isize gb_utf8_codepoint_size(u8 const *str, isize str_len) {gb_utf8_codepoint_size6958,195378
isize gb_utf8_encode_rune(u8 buf[4], Rune r) {gb_utf8_encode_rune6967,195551
gb_no_inline void *gb__array_set_capacity(void *array, isize capacity, isize element_size) {gb__array_set_capacity7015,196465
u32 gb_adler32(void const *data, isize len) {gb_adler327052,197403
gb_global u32 const GB__CRC32_TABLE[256] = {GB__CRC32_TABLE7086,198038
gb_global u64 const GB__CRC64_TABLE[256] = {GB__CRC64_TABLE7153,201223
u32 gb_crc32(void const *data, isize len) {gb_crc327220,207224
u64 gb_crc64(void const *data, isize len) {gb_crc647230,207486
u32 gb_fnv32(void const *data, isize len) {gb_fnv327240,207748
u64 gb_fnv64(void const *data, isize len) {gb_fnv647252,207939
u32 gb_fnv32a(void const *data, isize len) {gb_fnv32a7264,208146
u64 gb_fnv64a(void const *data, isize len) {gb_fnv64a7276,208338
gb_inline u32 gb_murmur32(void const *data, isize len) { return gb_murmur32_seed(data, len, 0x97gb_murmur327288,208546
gb_inline u64 gb_murmur64(void const *data, isize len) { return gb_murmur64_seed(data, len, 0x97gb_murmur647289,208653
u32 gb_murmur32_seed(void const *data, isize len, u32 seed) {gb_murmur32_seed7291,208761
u64 gb_murmur64_seed(void const *data_, isize len, u64 seed) {gb_murmur64_seed7338,209639
	gb_internal wchar_t *gb__alloc_utf8_to_ucs2(gbAllocator a, char const *text, isize *w_len_) {gb__alloc_utf8_to_ucs27452,211390
	gb_internal GB_FILE_SEEK_PROC(gb__win32_file_seek) {GB_FILE_SEEK_PROC7481,212203
	gb_internal GB_FILE_READ_AT_PROC(gb__win32_file_read) {GB_FILE_READ_AT_PROC7492,212472
	gb_internal GB_FILE_WRITE_AT_PROC(gb__win32_file_write) {GB_FILE_WRITE_AT_PROC7505,212844
	gb_internal GB_FILE_CLOSE_PROC(gb__win32_file_close) {GB_FILE_CLOSE_PROC7516,213208
	gbFileOperations const gbDefaultFileOperations = {gbDefaultFileOperations7520,213289
	gb_no_inline GB_FILE_OPEN_PROC(gb__win32_file_open) {GB_FILE_OPEN_PROC7527,213439
	gb_internal GB_FILE_SEEK_PROC(gb__posix_file_seek) {GB_FILE_SEEK_PROC7599,215509
	gb_internal GB_FILE_READ_AT_PROC(gb__posix_file_read) {GB_FILE_READ_AT_PROC7610,215778
	gb_internal GB_FILE_WRITE_AT_PROC(gb__posix_file_write) {GB_FILE_WRITE_AT_PROC7617,215969
	gb_internal GB_FILE_CLOSE_PROC(gb__posix_file_close) {GB_FILE_CLOSE_PROC7633,216451
	gbFileOperations const gbDefaultFileOperations = {gbDefaultFileOperations7637,216526
	gb_no_inline GB_FILE_OPEN_PROC(gb__posix_file_open) {GB_FILE_OPEN_PROC7644,216676
gbFileError gb_file_new(gbFile *f, gbFileDescriptor fd, gbFileOperations ops, char const *filenagb_file_new7684,217595
gbFileError gb_file_open_mode(gbFile *f, gbFileMode mode, char const *filename) {gb_file_open_mode7701,218059
gbFileError gb_file_close(gbFile *f) {gb_file_close7714,218426
gb_inline b32 gb_file_read_at_check(gbFile *f, void *buffer, isize size, i64 offset, isize *bytegb_file_read_at_check7743,218964
gb_inline b32 gb_file_write_at_check(gbFile *f, void const *buffer, isize size, i64 offset, isizgb_file_write_at_check7748,219194
gb_inline b32 gb_file_read_at(gbFile *f, void *buffer, isize size, i64 offset) {gb_file_read_at7754,219439
gb_inline b32 gb_file_write_at(gbFile *f, void const *buffer, isize size, i64 offset) {gb_file_write_at7758,219585
gb_inline i64 gb_file_seek(gbFile *f, i64 offset) {gb_file_seek7762,219739
gb_inline i64 gb_file_seek_to_end(gbFile *f) {gb_file_seek_to_end7769,219953
gb_inline i64 gb_file_skip(gbFile *f, i64 bytes) {gb_file_skip7777,220202
gb_inline i64 gb_file_tell(gbFile *f) {gb_file_tell7784,220416
gb_inline b32 gb_file_read (gbFile *f, void *buffer, isize size)       { return gb_file_read_at(gb_file_read7790,220614
gb_inline b32 gb_file_write(gbFile *f, void const *buffer, isize size) { return gb_file_write_atgb_file_write7791,220747
gbFileError gb_file_create(gbFile *f, char const *filename) {gb_file_create7794,220883
gbFileError gb_file_open(gbFile *f, char const *filename) {gb_file_open7799,221021
char const *gb_file_name(gbFile *f) { return f->filename ? f->filename : ""; }gb_file_name7804,221142
gb_inline b32 gb_file_has_changed(gbFile *f) {gb_file_has_changed7806,221222
gb_global b32    gb__std_file_set = false;gb__std_file_set7817,221518
gb_global gbFile gb__std_files[gbFileStandard_Count] = {{0}};gb__std_files7818,221561
gb_inline gbFile *const gb_file_get_standard(gbFileStandardType std) {gb_file_get_standard7823,221657
	#define GB__SET_STD_FILE(GB__SET_STD_FILE7825,221754
gb_inline i64 gb_file_size(gbFile *f) {gb_file_size7835,222182
gbFileError gb_file_truncate(gbFile *f, i64 size) {gb_file_truncate7841,222301
b32 gb_file_exists(char const *name) {gb_file_exists7853,222565
gb_inline gbFile *const gb_file_get_standard(gbFileStandardType std) {gb_file_get_standard7873,222979
	#define GB__SET_STD_FILE(GB__SET_STD_FILE7875,223076
gb_inline i64 gb_file_size(gbFile *f) {gb_file_size7885,223416
gb_inline gbFileError gb_file_truncate(gbFile *f, i64 size) {gb_file_truncate7894,223605
gb_inline b32 gb_file_exists(char const *name) {gb_file_exists7901,223805
gbFileTime gb_file_last_write_time(char const *filepath) {gb_file_last_write_time7909,223931
gb_inline b32 gb_file_copy(char const *existing_filename, char const *new_filename, b32 fail_if_gb_file_copy7931,224495
gb_inline b32 gb_file_move(char const *existing_filename, char const *new_filename) {gb_file_move7950,225003
b32 gb_file_remove(char const *filename) {gb_file_remove7969,225475
gbFileTime gb_file_last_write_time(char const *filepath) {gb_file_last_write_time7986,225797
gb_inline b32 gb_file_copy(char const *existing_filename, char const *new_filename, b32 fail_if_gb_file_copy7998,226012
gb_inline b32 gb_file_move(char const *existing_filename, char const *new_filename) {gb_file_move8018,226581
b32 gb_file_remove(char const *filename) {gb_file_remove8025,226781
gbFileContents gb_file_read_contents(gbAllocator a, b32 zero_terminate, char const *filepath) {gb_file_read_contents8040,226943
void gb_file_free_contents(gbFileContents *fc) {gb_file_free_contents8063,227548
gb_inline b32 gb_path_is_absolute(char const *path) {gb_path_is_absolute8074,227703
gb_inline b32 gb_path_is_relative(char const *path) { return !gb_path_is_absolute(path); }gb_path_is_relative8087,228070
gb_inline b32 gb_path_is_root(char const *path) {gb_path_is_root8089,228162
gb_inline char const *gb_path_base_name(char const *path) {gb_path_base_name8100,228449
gb_inline char const *gb_path_extension(char const *path) {gb_path_extension8107,228633
char *gb_path_get_full_name(gbAllocator a, char const *path) {gb_path_get_full_name8120,229139
isize gb_printf(char const *fmt, ...) {gb_printf8188,230750
isize gb_printf_err(char const *fmt, ...) {gb_printf_err8198,230895
isize gb_fprintf(struct gbFile *f, char const *fmt, ...) {gb_fprintf8207,231047
char *gb_bprintf(char const *fmt, ...) {gb_bprintf8216,231214
isize gb_snprintf(char *str, isize n, char const *fmt, ...) {gb_snprintf8225,231360
gb_inline isize gb_printf_va(char const *fmt, va_list va) {gb_printf_va8236,231538
gb_inline isize gb_printf_err_va(char const *fmt, va_list va) {gb_printf_err_va8240,231678
gb_inline isize gb_fprintf_va(struct gbFile *f, char const *fmt, va_list va) {gb_fprintf_va8244,231821
gb_inline char *gb_bprintf_va(char const *fmt, va_list va) {gb_bprintf_va8252,232082
enum {__anona24233aa1a038259,232254
	gbFmt_Minus     = GB_BIT(0),gbFmt_Minus8260,232261
	gbFmt_Plus      = GB_BIT(1),gbFmt_Plus8261,232291
	gbFmt_Alt       = GB_BIT(2),gbFmt_Alt8262,232321
	gbFmt_Space     = GB_BIT(3),gbFmt_Space8263,232351
	gbFmt_Zero      = GB_BIT(4),gbFmt_Zero8264,232381
	gbFmt_Char      = GB_BIT(5),gbFmt_Char8266,232412
	gbFmt_Short     = GB_BIT(6),gbFmt_Short8267,232442
	gbFmt_Int       = GB_BIT(7),gbFmt_Int8268,232472
	gbFmt_Long      = GB_BIT(8),gbFmt_Long8269,232502
	gbFmt_Llong     = GB_BIT(9),gbFmt_Llong8270,232532
	gbFmt_Size      = GB_BIT(10),gbFmt_Size8271,232562
	gbFmt_Intptr    = GB_BIT(11),gbFmt_Intptr8272,232593
	gbFmt_Unsigned  = GB_BIT(12),gbFmt_Unsigned8274,232625
	gbFmt_Lower     = GB_BIT(13),gbFmt_Lower8275,232656
	gbFmt_Upper     = GB_BIT(14),gbFmt_Upper8276,232687
	gbFmt_Done      = GB_BIT(30),gbFmt_Done8279,232720
	gbFmt_Ints = gbFmt_Char|gbFmt_Short|gbFmt_Int|gbFmt_Long|gbFmt_Llong|gbFmt_Size|gbFmt_IntptrgbFmt_Ints8281,232752
typedef struct {__anona24233aa1b088284,232850
	i32 base;base8285,232867
	i32 flags;flags8286,232878
	i32 width;width8287,232890
	i32 precision;precision8288,232902
} gbprivFmtInfo;gbprivFmtInfo8289,232918
gb_internal isize gb__print_string(char *text, isize max_len, gbprivFmtInfo *info, char const *sgb__print_string8292,232937
gb_internal isize gb__print_char(char *text, isize max_len, gbprivFmtInfo *info, char arg) {gb__print_char8342,234160
gb_internal isize gb__print_i64(char *text, isize max_len, gbprivFmtInfo *info, i64 value) {gb__print_i648349,234343
gb_internal isize gb__print_u64(char *text, isize max_len, gbprivFmtInfo *info, u64 value) {gb__print_u648355,234559
gb_internal isize gb__print_f64(char *text, isize max_len, gbprivFmtInfo *info, f64 arg) {gb__print_f648362,234776
gb_no_inline isize gb_snprintf_va(char *text, isize max_len, char const *fmt, va_list va) {gb_snprintf_va8461,236704
gbDllHandle gb_dll_load(char const *filepath) {gb_dll_load8657,241207
gb_inline void      gb_dll_unload      (gbDllHandle dll)                        { FreeLibrary(cagb_dll_unload8660,241306
gb_inline gbDllProc gb_dll_proc_address(gbDllHandle dll, char const *proc_name) { return cast(gbgb_dll_proc_address8661,241421
gbDllHandle gb_dll_load(char const *filepath) {gb_dll_load8665,241589
gb_inline void      gb_dll_unload      (gbDllHandle dll)                        { dlclose(dll); gb_dll_unload8670,241749
gb_inline gbDllProc gb_dll_proc_address(gbDllHandle dll, char const *proc_name) { return cast(gbgb_dll_proc_address8671,241847
	gb_inline u64 gb_rdtsc(void) { return __rdtsc(); }gb_rdtsc8683,242122
	gb_inline u64 gb_rdtsc(void) {gb_rdtsc8685,242198
	gb_inline u64 gb_rdtsc(void) {gb_rdtsc8691,242332
	gb_inline u64 gb_rdtsc(void) {gb_rdtsc8697,242509
	gb_inline f64 gb_time_now(void) {gb_time_now8719,242948
	gb_inline u64 gb_utc_time_now(void) {gb_utc_time_now8734,243367
	gb_inline void gb_sleep_ms(u32 ms) { Sleep(ms); }gb_sleep_ms8745,243573
	gb_global f64 gb__timebase  = 0.0;gb__timebase8749,243632
	gb_global u64 gb__timestart = 0;gb__timestart8750,243668
	gb_inline f64 gb_time_now(void) {gb_time_now8752,243703
	gb_inline u64 gb_utc_time_now(void) {gb_utc_time_now8778,244332
	gb_inline void gb_sleep_ms(u32 ms) {gb_sleep_ms8795,244851
gb_global gbAtomic32 gb__random_shared_counter = {0};gb__random_shared_counter8811,245127
gb_internal u32 gb__get_noise_from_time(void) {gb__get_noise_from_time8813,245182
gb_internal gb_inline u32 gb__permute_qpr(u32 x) {gb__permute_qpr8832,245712
gb_internal gb_inline u32 gb__permute_with_offset(u32 x, u32 offset) {gb__permute_with_offset8846,246007
void gb_random_init(gbRandom *r) {gb_random_init8851,246134
u32 gb_random_gen_u32(gbRandom *r) {gb_random_gen_u328875,246798
u32 gb_random_gen_u32_unique(gbRandom *r) {gb_random_gen_u32_unique8890,247070
u64 gb_random_gen_u64(gbRandom *r) {gb_random_gen_u648901,247272
isize gb_random_gen_isize(gbRandom *r) {gb_random_gen_isize8906,247385
i64 gb_random_range_i64(gbRandom *r, i64 lower_inc, i64 higher_inc) {gb_random_range_i648914,247489
isize gb_random_range_isize(gbRandom *r, isize lower_inc, isize higher_inc) {gb_random_range_isize8923,247694
f64 gb__copy_sign64(f64 x, f64 y) {gb__copy_sign648933,247987
f64 gb__floor64    (f64 x)        { return cast(f64)((x >= 0.0) ? cast(i64)x : cast(i64)(x-0.999gb__floor648943,248160
f64 gb__ceil64     (f64 x)        { return cast(f64)((x < 0) ? cast(i64)x : (cast(i64)x)+1); }gb__ceil648944,248275
f64 gb__round64    (f64 x)        { return cast(f64)((x >= 0.0) ? gb__floor64(x + 0.5) : gb__ceigb__round648945,248370
f64 gb__remainder64(f64 x, f64 y) { return x - (gb__round64(x/y)*y); }gb__remainder648946,248483
f64 gb__abs64      (f64 x)        { return x < 0 ? -x : x; }gb__abs648947,248554
f64 gb__sign64     (f64 x)        { return x < 0 ? -1.0 : +1.0; }gb__sign648948,248615
f64 gb__mod64(f64 x, f64 y) {gb__mod648950,248682
f64 gb_random_range_f64(gbRandom *r, f64 lower_inc, f64 higher_inc) {gb_random_range_f648959,248866
gb_inline void gb_exit(u32 code) { ExitProcess(code); }gb_exit8971,249119
gb_inline void gb_exit(u32 code) { exit(code); }gb_exit8973,249181
gb_inline void gb_yield(void) {gb_yield8976,249238
gb_inline void gb_set_env(char const *name, char const *value) {gb_set_env8984,249344
gb_inline void gb_unset_env(char const *name) {gb_unset_env8993,249567
gb_inline u16 gb_endian_swap16(u16 i) {gb_endian_swap169003,249765
gb_inline u32 gb_endian_swap32(u32 i) {gb_endian_swap329007,249833
gb_inline u64 gb_endian_swap64(u64 i) {gb_endian_swap649012,249957
gb_inline isize gb_count_set_bits(u64 mask) {gb_count_set_bits9020,250255
gb_inline void gb_key_state_update(gbKeyState *s, b32 is_down) {gb_key_state_update9042,250511
#define ERROR_DEVICE_NOT_CONNECTED ERROR_DEVICE_NOT_CONNECTED9053,250937
GB_XINPUT_GET_STATE(gbXInputGetState_Stub) {GB_XINPUT_GET_STATE9056,250985
GB_XINPUT_SET_STATE(gbXInputSetState_Stub) {GB_XINPUT_SET_STATE9060,251112
gb_internal gb_inline f32 gb__process_xinput_stick_value(i16 value, i16 dead_zone_threshold) {gb__process_xinput_stick_value9066,251245
gb_internal void gb__platform_resize_dib_section(gbPlatform *p, i32 width, i32 height) {gb__platform_resize_dib_section9078,251635
gb_internal gbKeyType gb__win32_from_vk(unsigned int key) {gb__win32_from_vk9118,252916
LRESULT CALLBACK gb__win32_window_callback(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {gb__win32_window_callback9202,255777
typedef void *wglCreateContextAttribsARB_Proc(void *hDC, void *hshareContext, int const *attribLwglCreateContextAttribsARB_Proc9350,260648
b32 gb__platform_init(gbPlatform *p, char const *window_title, gbVideoMode mode, gbRendererType gb__platform_init9353,260752
gb_inline b32 gb_platform_init_with_software(gbPlatform *p, char const *window_title,gb_platform_init_with_software9538,267515
gb_inline b32 gb_platform_init_with_opengl(gbPlatform *p, char const *window_title,gb_platform_init_with_opengl9547,267884
typedef struct _XINPUT_GAMEPAD {_XINPUT_GAMEPAD9561,268460
	u16 wButtons;wButtons9562,268493
	u8  bLeftTrigger;bLeftTrigger9563,268508
	u8  bRightTrigger;bRightTrigger9564,268527
	u16 sThumbLX;sThumbLX9565,268547
	u16 sThumbLY;sThumbLY9566,268562
	u16 sThumbRX;sThumbRX9567,268577
	u16 sThumbRY;sThumbRY9568,268592
} XINPUT_GAMEPAD;XINPUT_GAMEPAD9569,268607
typedef struct _XINPUT_STATE {_XINPUT_STATE9571,268626
	DWORD          dwPacketNumber;dwPacketNumber9572,268657
	XINPUT_GAMEPAD Gamepad;Gamepad9573,268689
} XINPUT_STATE;XINPUT_STATE9574,268714
typedef struct _XINPUT_VIBRATION {_XINPUT_VIBRATION9576,268731
	u16 wLeftMotorSpeed;wLeftMotorSpeed9577,268766
	u16 wRightMotorSpeed;wRightMotorSpeed9578,268788
} XINPUT_VIBRATION;XINPUT_VIBRATION9579,268811
#define XINPUT_GAMEPAD_DPAD_UP XINPUT_GAMEPAD_DPAD_UP9581,268832
#define XINPUT_GAMEPAD_DPAD_DOWN XINPUT_GAMEPAD_DPAD_DOWN9582,268887
#define XINPUT_GAMEPAD_DPAD_LEFT XINPUT_GAMEPAD_DPAD_LEFT9583,268942
#define XINPUT_GAMEPAD_DPAD_RIGHT XINPUT_GAMEPAD_DPAD_RIGHT9584,268997
#define XINPUT_GAMEPAD_START XINPUT_GAMEPAD_START9585,269052
#define XINPUT_GAMEPAD_BACK XINPUT_GAMEPAD_BACK9586,269107
#define XINPUT_GAMEPAD_LEFT_THUMB XINPUT_GAMEPAD_LEFT_THUMB9587,269162
#define XINPUT_GAMEPAD_RIGHT_THUMB XINPUT_GAMEPAD_RIGHT_THUMB9588,269217
#define XINPUT_GAMEPAD_LEFT_SHOULDER XINPUT_GAMEPAD_LEFT_SHOULDER9589,269272
#define XINPUT_GAMEPAD_RIGHT_SHOULDER XINPUT_GAMEPAD_RIGHT_SHOULDER9590,269323
#define XINPUT_GAMEPAD_A XINPUT_GAMEPAD_A9591,269374
#define XINPUT_GAMEPAD_B XINPUT_GAMEPAD_B9592,269425
#define XINPUT_GAMEPAD_X XINPUT_GAMEPAD_X9593,269476
#define XINPUT_GAMEPAD_Y XINPUT_GAMEPAD_Y9594,269527
#define XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE9595,269578
#define XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE9596,269627
#define XINPUT_GAMEPAD_TRIGGER_THRESHOLD XINPUT_GAMEPAD_TRIGGER_THRESHOLD9597,269676
#define XUSER_MAX_COUNT XUSER_MAX_COUNT9601,269755
void gb_platform_update(gbPlatform *p) {gb_platform_update9604,269789
			#define GB__PROCESS_DIGITAL_BUTTON(GB__PROCESS_DIGITAL_BUTTON9740,274194
void gb_platform_display(gbPlatform *p) {gb_platform_display9782,276039
void gb_platform_destroy(gbPlatform *p) {gb_platform_destroy9805,276706
void gb_platform_show_cursor(gbPlatform *p, b32 show) {gb_platform_show_cursor9815,277040
void gb_platform_set_mouse_position(gbPlatform *p, i32 x, i32 y) {gb_platform_set_mouse_position9820,277133
void gb_platform_set_controller_vibration(gbPlatform *p, isize index, f32 left_motor, f32 right_gb_platform_set_controller_vibration9833,277444
void gb_platform_set_window_position(gbPlatform *p, i32 x, i32 y) {gb_platform_set_window_position9846,277918
void gb_platform_set_window_title(gbPlatform *p, char const *title, ...) {gb_platform_set_window_title9856,278210
void gb_platform_toggle_fullscreen(gbPlatform *p, b32 fullscreen_desktop) {gb_platform_toggle_fullscreen9869,278576
void gb_platform_toggle_borderless(gbPlatform *p) {gb_platform_toggle_borderless9910,280055
gb_inline void gb_platform_make_opengl_context_current(gbPlatform *p) {gb_platform_make_opengl_context_current9925,280483
gb_inline void gb_platform_show_window(gbPlatform *p) {gb_platform_show_window9931,280677
gb_inline void gb_platform_hide_window(gbPlatform *p) {gb_platform_hide_window9936,280824
gb_inline gbVideoMode gb_video_mode_get_desktop(void) {gb_video_mode_get_desktop9941,280970
isize gb_video_mode_get_fullscreen_modes(gbVideoMode *modes, isize max_mode_count) {gb_video_mode_get_fullscreen_modes9947,281240
b32 gb_platform_has_clipboard_text(gbPlatform *p) {gb_platform_has_clipboard_text9962,281683
void gb_platform_set_clipboard_text(gbPlatform *p, char const *str) {gb_platform_set_clipboard_text9985,282142
char *gb_platform_get_clipboard_text(gbPlatform *p, gbAllocator a) {gb_platform_get_clipboard_text10015,282874
	#define NSIntegerEncoding NSIntegerEncoding10043,283545
	#define NSUIntegerEncoding NSUIntegerEncoding10044,283577
	#define NSIntegerEncoding NSIntegerEncoding10046,283615
	#define NSUIntegerEncoding NSUIntegerEncoding10047,283647
	typedef CGPoint NSPoint;NSPoint10053,283734
	typedef CGSize  NSSize;NSSize10054,283760
	typedef CGRect  NSRect;NSRect10055,283785
#define abi_objc_msgSend_stret abi_objc_msgSend_stret10067,284058
#define abi_objc_msgSend_stret abi_objc_msgSend_stret10069,284108
#define abi_objc_msgSend_fpret abi_objc_msgSend_fpret10072,284181
#define abi_objc_msgSend_fpret abi_objc_msgSend_fpret10074,284237
#define objc_msgSend_id	objc_msgSend_id10077,284289
#define objc_msgSend_void	objc_msgSend_void10078,284348
#define objc_msgSend_void_id	objc_msgSend_void_id10079,284410
#define objc_msgSend_void_bool	objc_msgSend_void_bool10080,284478
#define objc_msgSend_id_char_const	objc_msgSend_id_char_const10081,284550
gb_internal NSUInteger gb__osx_application_should_terminate(id self, SEL _sel, id sender) {gb__osx_application_should_terminate10083,284632
gb_internal void gb__osx_window_will_close(id self, SEL _sel, id notification) {gb__osx_window_will_close10088,284765
gb_internal void gb__osx_window_did_become_key(id self, SEL _sel, id notification) {gb__osx_window_did_become_key10093,284939
b32 gb__platform_init(gbPlatform *p, char const *window_title, gbVideoMode mode, gbRendererType gb__platform_init10101,285146
b32 gb_platform_init_with_software(gbPlatform *p, char const *window_title, i32 width, i32 heighgb_platform_init_with_software10278,293893
b32 gb_platform_init_with_opengl(gbPlatform *p, char const *window_title, i32 width, i32 height,gb_platform_init_with_opengl10283,294237
gb_internal gbKeyType gb__osx_from_key_code(u16 key_code) {gb__osx_from_key_code10294,294712
gb_internal void gb__osx_on_cocoa_event(gbPlatform *p, id event, id window) {gb__osx_on_cocoa_event10408,299201
void gb_platform_update(gbPlatform *p) {gb_platform_update10488,302781
void gb_platform_display(gbPlatform *p) {gb_platform_display10605,306388
void gb_platform_destroy(gbPlatform *p) {gb_platform_destroy10624,306903
void gb_platform_show_cursor(gbPlatform *p, b32 show) {gb_platform_show_cursor10636,307224
void gb_platform_set_mouse_position(gbPlatform *p, i32 x, i32 y) {gb_platform_set_mouse_position10644,307476
void gb_platform_set_controller_vibration(gbPlatform *p, isize index, f32 left_motor, f32 right_gb_platform_set_controller_vibration10652,307690
b32 gb_platform_has_clipboard_text(gbPlatform *p) {gb_platform_has_clipboard_text10656,307814
void gb_platform_set_clipboard_text(gbPlatform *p, char const *str) {gb_platform_set_clipboard_text10661,307900
char *gb_platform_get_clipboard_text(gbPlatform *p, gbAllocator a) {gb_platform_get_clipboard_text10665,307989
void gb_platform_set_window_position(gbPlatform *p, i32 x, i32 y) {gb_platform_set_window_position10670,308091
void gb_platform_set_window_title(gbPlatform *p, char const *title, ...) {gb_platform_set_window_title10674,308178
void gb_platform_toggle_fullscreen(gbPlatform *p, b32 fullscreen_desktop) {gb_platform_toggle_fullscreen10686,308617
void gb_platform_toggle_borderless(gbPlatform *p) {gb_platform_toggle_borderless10690,308712
void gb_platform_make_opengl_context_current(gbPlatform *p) {gb_platform_make_opengl_context_current10694,308783
void gb_platform_show_window(gbPlatform *p) {gb_platform_show_window10698,308935
void gb_platform_hide_window(gbPlatform *p) {gb_platform_hide_window10702,309000
i32 gb__osx_mode_bits_per_pixel(CGDisplayModeRef mode) {gb__osx_mode_bits_per_pixel10706,309065
i32 gb__osx_display_bits_per_pixel(CGDirectDisplayID display) {gb__osx_display_bits_per_pixel10721,309704
gbVideoMode gb_video_mode_get_desktop(void) {gb_video_mode_get_desktop10728,309941
isize gb_video_mode_get_fullscreen_modes(gbVideoMode *modes, isize max_mode_count) {gb_video_mode_get_fullscreen_modes10736,310207
gb_inline gbVideoMode gb_video_mode(i32 width, i32 height, i32 bits_per_pixel) {gb_video_mode10763,311056
gb_inline b32 gb_video_mode_is_valid(gbVideoMode mode) {gb_video_mode_is_valid10771,311241
GB_COMPARE_PROC(gb_video_mode_cmp) {GB_COMPARE_PROC10789,311732
GB_COMPARE_PROC(gb_video_mode_dsc_cmp) {GB_COMPARE_PROC10802,312137

lib/bitset.h,221
#define CHAR_BIT CHAR_BIT2,48
#define BITMASK(BITMASK3,67
#define BITSLOT(BITSLOT4,110
#define BITSET(BITSET5,146
#define BITCLEAR(BITCLEAR6,199
#define BITTEST(BITTEST7,255
#define BITNSLOTS(BITNSLOTS8,308

lib/defer.h,266
#define __JWALTER_DEFER_H__JWALTER_DEFER_H24,1209
#	define defer_merge(defer_merge31,1531
#	define defer_varname(defer_varname32,1562
#	define defer defer33,1621
#	define defer_(defer_37,1874
#	define defer__(defer__47,2158
#	define defer defer48,2188
